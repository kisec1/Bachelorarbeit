{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/main-nav/main-nav.component.css","webpack:///./src/app/components/main-nav/main-nav.component.html","webpack:///./src/app/components/main-nav/main-nav.component.ts","webpack:///./src/app/components/overview/overview.component.css","webpack:///./src/app/components/overview/overview.component.html","webpack:///./src/app/components/overview/overview.component.ts","webpack:///./src/app/components/profile/profile.component.css","webpack:///./src/app/components/profile/profile.component.html","webpack:///./src/app/components/profile/profile.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/search-by-client/client-table/client-table.component.css","webpack:///./src/app/components/search-by-client/client-table/client-table.component.html","webpack:///./src/app/components/search-by-client/client-table/client-table.component.ts","webpack:///./src/app/components/search-by-client/device-table/device-table.component.css","webpack:///./src/app/components/search-by-client/device-table/device-table.component.html","webpack:///./src/app/components/search-by-client/device-table/device-table.component.ts","webpack:///./src/app/components/search-by-client/search-by-client.component.css","webpack:///./src/app/components/search-by-client/search-by-client.component.html","webpack:///./src/app/components/search-by-client/search-by-client.component.ts","webpack:///./src/app/components/stk/conclusion/conclusion.component.css","webpack:///./src/app/components/stk/conclusion/conclusion.component.html","webpack:///./src/app/components/stk/conclusion/conclusion.component.ts","webpack:///./src/app/components/stk/infos/infos.component.css","webpack:///./src/app/components/stk/infos/infos.component.html","webpack:///./src/app/components/stk/infos/infos.component.ts","webpack:///./src/app/components/stk/preview/preview-report-dialog/preview-report-dialog.component.css","webpack:///./src/app/components/stk/preview/preview-report-dialog/preview-report-dialog.component.html","webpack:///./src/app/components/stk/preview/preview-report-dialog/preview-report-dialog.component.ts","webpack:///./src/app/components/stk/preview/preview.component.css","webpack:///./src/app/components/stk/preview/preview.component.html","webpack:///./src/app/components/stk/preview/preview.component.ts","webpack:///./src/app/components/stk/spare-parts/spare-parts.component.css","webpack:///./src/app/components/stk/spare-parts/spare-parts.component.html","webpack:///./src/app/components/stk/spare-parts/spare-parts.component.ts","webpack:///./src/app/components/stk/spare-parts/spareparts-edit-dialog/spareparts-edit-dialog.component.css","webpack:///./src/app/components/stk/spare-parts/spareparts-edit-dialog/spareparts-edit-dialog.component.html","webpack:///./src/app/components/stk/spare-parts/spareparts-edit-dialog/spareparts-edit-dialog.component.ts","webpack:///./src/app/components/stk/stk.component.css","webpack:///./src/app/components/stk/stk.component.html","webpack:///./src/app/components/stk/stk.component.ts","webpack:///./src/app/components/stk/test-procedure/test-procedure.component.css","webpack:///./src/app/components/stk/test-procedure/test-procedure.component.html","webpack:///./src/app/components/stk/test-procedure/test-procedure.component.ts","webpack:///./src/app/components/stk/tools/tools.component.css","webpack:///./src/app/components/stk/tools/tools.component.html","webpack:///./src/app/components/stk/tools/tools.component.ts","webpack:///./src/app/components/stk/work/work-edit-dialog/work-edit-dialog.component.css","webpack:///./src/app/components/stk/work/work-edit-dialog/work-edit-dialog.component.html","webpack:///./src/app/components/stk/work/work-edit-dialog/work-edit-dialog.component.ts","webpack:///./src/app/components/stk/work/work.component.css","webpack:///./src/app/components/stk/work/work.component.html","webpack:///./src/app/components/stk/work/work.component.ts","webpack:///./src/app/components/unfinished-reports/unfinished-reports.component.css","webpack:///./src/app/components/unfinished-reports/unfinished-reports.component.html","webpack:///./src/app/components/unfinished-reports/unfinished-reports.component.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/models/report.ts","webpack:///./src/app/models/sparePart.ts","webpack:///./src/app/models/testPoint.ts","webpack:///./src/app/models/testProcedure.ts","webpack:///./src/app/models/testSection.ts","webpack:///./src/app/models/work.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/client.service.ts","webpack:///./src/app/services/device.service.ts","webpack:///./src/app/services/overview.service.ts","webpack:///./src/app/services/search-page.service.ts","webpack:///./src/app/services/stk.service.ts","webpack:///./src/app/services/tool.service.ts","webpack:///./src/app/services/validate.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".buttons{\\n  margin-left: 30px;\\n  padding-left: 30px;\\n}\\n\\nbutton{\\n  margin-left: 5px;\\n}\\n\"","module.exports = \"<app-main-nav *ngIf=\\\"isLoggedIn()\\\">\\n  <flash-messages></flash-messages>\\n  <router-outlet></router-outlet>\\n</app-main-nav>\\n\\n<div *ngIf=\\\"!isLoggedIn()\\\">\\n  <mat-toolbar color=\\\"primary\\\"></mat-toolbar>\\n  <app-login ></app-login>\\n  <flash-messages></flash-messages>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport {AuthService} from \"./services/auth.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {StkService} from \"./services/stk.service\";\n\nexport interface Language {\n  value: string;\n  viewValue: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  constructor(private authService: AuthService,\n              private translate: TranslateService,\n              private stkService: StkService){\n    translate.setDefaultLang('de');\n    translate.use('de');\n  }\n\n  isLoggedIn(){\n    return this.authService.loggedIn();\n  }\n\n  ngOnInit(){\n    this.stkService.updateLocalReports();\n  }\n\n\n}\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatButtonModule,\n  MatToolbarModule,\n  MatSidenavModule,\n  MatIconModule,\n  MatListModule,\n  MatCardModule,\n  MatTabsModule,\n  MatProgressBarModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatGridListModule,\n  MatSelectModule,\n  MatMenuModule,\n  MatTableModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatExpansionModule,\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MAT_DATE_LOCALE,\n  MatDialogModule,\n  MatBadgeModule, MatStepperModule, MatTooltipModule\n} from \"@angular/material\";\nimport { MainNavComponent } from './components/main-nav/main-nav.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport { ProfileComponent } from './components/profile/profile.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {ValidateService} from \"./services/validate.service\";\nimport {FlashMessagesModule} from \"angular2-flash-messages\";\nimport {AuthService} from \"./services/auth.service\";\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {AuthGuard} from \"./guards/auth.guard\";\nimport { SearchByClientComponent } from './components/search-by-client/search-by-client.component';\nimport { ClientTableComponent } from './components/search-by-client/client-table/client-table.component';\nimport { StkComponent } from './components/stk/stk.component';\nimport { OverviewComponent } from './components/overview/overview.component';\nimport {ClientService} from \"./services/client.service\";\nimport {SearchPageService} from \"./services/search-page.service\";\nimport { DeviceTableComponent } from './components/search-by-client/device-table/device-table.component';\nimport {DeviceService} from \"./services/device.service\";\nimport {ToolsComponent} from \"./components/stk/tools/tools.component\";\nimport {MatChipsModule} from '@angular/material/chips';\nimport { SparePartsComponent } from './components/stk/spare-parts/spare-parts.component';\nimport { WorkComponent } from './components/stk/work/work.component';\nimport { InfosComponent } from './components/stk/infos/infos.component';\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {TranslateHttpLoader} from \"@ngx-translate/http-loader\";\nimport { UnfinishedReportsComponent } from './components/unfinished-reports/unfinished-reports.component';\nimport {StkService} from \"./services/stk.service\";\nimport { WorkEditDialogComponent } from './components/stk/work/work-edit-dialog/work-edit-dialog.component';\nimport { SparepartsEditDialogComponent } from './components/stk/spare-parts/spareparts-edit-dialog/spareparts-edit-dialog.component';\nimport { PreviewComponent } from './components/stk/preview/preview.component';\nimport { PreviewReportDialogComponent } from './components/stk/preview/preview-report-dialog/preview-report-dialog.component';\nimport { ConclusionComponent } from './components/stk/conclusion/conclusion.component';\nimport { TestProcedureComponent } from './components/stk/test-procedure/test-procedure.component';\nimport {CdkTableModule} from \"@angular/cdk/table\";\n\nconst appRoutes: Routes =[\n  {path:'login', component: LoginComponent},\n  {path:'register', component: RegisterComponent, canActivate:[AuthGuard]},\n  {path:'profile', component: ProfileComponent, canActivate:[AuthGuard]},\n  {path:'searchByClient', component: SearchByClientComponent, canActivate:[AuthGuard]},\n  {path:'stk', component: StkComponent, canActivate:[AuthGuard]},\n  {path:'overview', component: OverviewComponent, canActivate:[AuthGuard]},\n  {path:'unfinishedReports', component: UnfinishedReportsComponent, canActivate:[AuthGuard]},\n  {path:'**', component: ProfileComponent},\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainNavComponent,\n    LoginComponent,\n    RegisterComponent,\n    ProfileComponent,\n    SearchByClientComponent,\n    ClientTableComponent,\n    StkComponent,\n    OverviewComponent,\n    DeviceTableComponent,\n    ToolsComponent,\n    SparePartsComponent,\n    WorkComponent,\n    InfosComponent,\n    UnfinishedReportsComponent,\n    WorkEditDialogComponent,\n    SparepartsEditDialogComponent,\n    PreviewComponent,\n    PreviewReportDialogComponent,\n    ConclusionComponent,\n    TestProcedureComponent\n\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    MatButtonModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatProgressBarModule,\n    MatIconModule,\n    MatListModule,\n    MatMenuModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    RouterModule.forRoot(appRoutes),\n    FlashMessagesModule.forRoot(),\n    MatSelectModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTabsModule,\n    MatGridListModule,\n    MatExpansionModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatStepperModule,\n    MatTooltipModule,\n    MatBadgeModule,\n    CdkTableModule,\n    MatNativeDateModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n],\n  entryComponents: [WorkEditDialogComponent, SparepartsEditDialogComponent, PreviewReportDialogComponent],\n  providers: [ValidateService,\n    FlashMessagesModule,\n    AuthService,\n    ClientService,\n    SearchPageService,\n    DeviceService,\n    AuthGuard,\n    StkService,\n    {provide: MAT_DATE_LOCALE, useValue: 'de-DE'}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n","module.exports = \"mat-card{\\n  max-width: 600px;\\n  max-height: 600px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 100px;\\n  text-align: center;\\n}\\n\\nmat-form-field{\\n  width: 100%;\\n\\n}\\n\\nh1, h2{\\n  text-align: center;\\n}\\n\\nmat-card-header {\\n  text-align: center;\\n}\\n\\n.icon{\\n  font-size: larger;\\n}\\n\\nmat-card-content{\\n  max-width: 400px;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n\\nmat-card-actions{\\n  text-align: center;\\n}\\n\\nbutton{\\n  width: 100%;\\n  margin-top: 20px;\\n  margin-bottom: 20px;\\n  max-width: 80%;\\n}\\n\\nmat-card-header{\\n  margin-top: 100px;\\n}\\n\\n.logo{\\n  width: 300px;\\n  margin-bottom: 20px;\\n  margin-top: 20px;\\n}\\n\"","module.exports = \"<mat-card>\\n  <mat-card-title>\\n    <img class=\\\"logo\\\" src=\\\"assets/images/hospitoolLogo.png\\\">\\n  </mat-card-title>\\n\\n  <mat-card-content>\\n    <form (ngSubmit)=\\\"onLoginSubmit()\\\" #loginForm=\\\"ngForm\\\">\\n\\n      <mat-form-field>\\n        <input matInput [(ngModel)]=\\\"username\\\" name=\\\"username\\\" required autocomplete=\\\"on\\\">\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>person</mat-icon>&nbsp;</span>\\n        <mat-label>Username</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput [(ngModel)]=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" required autocomplete=\\\"on\\\">\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>vpn_key</mat-icon>&nbsp;</span>\\n        <mat-label>Passwort</mat-label>\\n      </mat-form-field>\\n\\n      <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!loginForm.form.valid\\\">Login</button>\\n\\n    </form>\\n  </mat-card-content>\\n  <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"waiting\\\"></mat-progress-bar>\\n</mat-card>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {FlashMessagesService} from \"angular2-flash-messages\";\nimport {ClientService} from \"../../services/client.service\";\nimport {DeviceService} from \"../../services/device.service\";\nimport {ToolService} from \"../../services/tool.service\";\nimport {StkService} from \"../../services/stk.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  username: String;\n  password: String;\n  waiting: boolean = false;\n\n\n  constructor(private authService: AuthService,\n              private router: Router,\n              private flashMessage: FlashMessagesService,\n              private clientService: ClientService,\n              private deviceService: DeviceService,\n              private stkService: StkService,\n              private toolService: ToolService) { }\n\n  onLoginSubmit(){\n    this.waiting = true;\n    const user = {\n      username: this.username,\n      password: this.password\n    }\n    this.authService.authenticateUser(user).subscribe( data => {\n      if(data.success){\n        this.authService.storeUserData(data.token, data.user);\n        this.stkService.updateLocalReports();\n        this.toolService.getTools();\n        this.clientService.getClients();\n        this.deviceService.getDevices(0);\n        this.waiting = false;\n        this.router.navigate(['/profile'])\n      }\n      else{\n        this.flashMessage.show(data.msg, {cssClass: 'alert-danger', timeout: 3000})\n        this.router.navigate(['/login'])\n        this.waiting = false;\n      }\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 200px;\\n}\\n\\n.mat-toolbar.mat-primary {\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n\\n.spacer{\\n  flex: 1 1 auto;\\n}\\n\\n.hidden{\\n  display: none;\\n}\\n\\ncontentDiv{\\n  height: 100%;\\n  z-index: -1;\\n}\\n\"","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport=\\\"true\\\"\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n    [opened]=\\\"stkService.openDrawer\\\">\\n    <!--[opened]=\\\"!(isHandset$ | async)\\\">-->\\n    <mat-toolbar *ngIf=\\\"(isHandset$ | async)\\\">\\n      {{\\\"mainNav.menu\\\" | translate}}\\n    </mat-toolbar>\\n    <mat-nav-list *ngIf=\\\"(isHandset$ | async)\\\">\\n      <a mat-list-item routerLink=\\\"/searchByClient\\\"> {{\\\"mainNav.search\\\" | translate}}</a>\\n      <a mat-list-item routerLink=\\\"/unfinishedReports\\\"> {{\\\"mainNav.unfinishedReports\\\" | translate}}</a>\\n      <a mat-list-item routerLink=\\\"/stk\\\"> {{\\\"mainNav.stk\\\" | translate}}</a>\\n      <a mat-list-item routerLink=\\\"/overview\\\"> {{\\\"mainNav.overview\\\" | translate}}</a>\\n    </mat-nav-list>\\n    <mat-toolbar>\\n      {{\\\"mainNav.reports\\\" | translate}}\\n    </mat-toolbar>\\n    <mat-nav-list>\\n      <a mat-list-item *ngFor=\\\"let report of stkService.reports\\\"\\n         (click)=\\\"stkService.selectReport(report)\\\"\\n         routerLink=\\\"/stk\\\">\\n        {{report.device.id}}\\n      </a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n    <mat-toolbar color=\\\"primary\\\">\\n      <button\\n        type=\\\"button\\\"\\n        aria-label=\\\"Toggle sidenav\\\"\\n        mat-icon-button\\n        (click)=\\\"stkService.openDrawer = !stkService.openDrawer\\\">\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n      </button>\\n      <span>Hospitool</span>\\n      <div [ngClass]=\\\"{hidden: (isHandset$ | async)}\\\" *ngIf=\\\"isLoggedIn()\\\">\\n        <button mat-flat-button [matMenuTriggerFor]=\\\"searchMenu\\\">\\n          {{\\\"mainNav.search\\\" | translate}}\\n        </button>\\n        <mat-menu #searchMenu=\\\"matMenu\\\">\\n          <button mat-menu-item routerLink=\\\"/searchByClient\\\">{{\\\"mainNav.byClient\\\" | translate}}</button>\\n          <button mat-menu-item routerLink=\\\"/unfinishedReports\\\">{{\\\"mainNav.unfinishedReports\\\" | translate}}</button>\\n        </mat-menu>\\n        <button mat-flat-button routerLink=\\\"/stk\\\" (click)=\\\"stkService.openDrawer = true\\\">{{\\\"mainNav.stk\\\" | translate}}</button>\\n        <button mat-flat-button routerLink=\\\"/overview\\\">{{\\\"mainNav.overview\\\" | translate}}</button>\\n      </div>\\n\\n      <span class=\\\"spacer\\\"></span>\\n\\n      <div *ngIf=\\\"isLoggedIn()\\\">\\n        <!--\\n      <div [ngClass]=\\\"{hidden: (isHandset$ | async)}\\\" *ngIf=\\\"isLoggedIn()\\\">\\n      -->\\n        <button mat-flat-button [matMenuTriggerFor]=\\\"settingsMenu\\\">\\n          <mat-icon>\\n            settings\\n          </mat-icon>\\n        </button>\\n        <mat-menu #settingsMenu=\\\"matMenu\\\">\\n          <button mat-menu-item routerLink=\\\"/profile\\\">{{\\\"mainNav.profile\\\" | translate}}</button>\\n          <button mat-menu-item (click)=\\\"logout()\\\">{{\\\"mainNav.logout\\\" | translate}}</button>\\n        </mat-menu>\\n\\n        <button mat-flat-button [matMenuTriggerFor]=\\\"languageMenu\\\">\\n          <mat-icon>\\n            language\\n          </mat-icon>\\n          ({{selectedLanguage}})\\n        </button>\\n        <mat-menu #languageMenu=\\\"matMenu\\\">\\n          <button mat-menu-item (click)=\\\"useLanguage('de')\\\">de</button>\\n          <button mat-menu-item (click)=\\\"useLanguage('en')\\\">en</button>\\n        </mat-menu>\\n      </div>\\n\\n    </mat-toolbar>\\n    <div calss=\\\"contentDiv\\\">\\n\\n      <ng-content></ng-content>\\n\\n    </div>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\\n\"","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {AuthService} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {Language} from \"../../app.component\";\nimport {StkService} from \"../../services/stk.service\";\n\n@Component({\n  selector: 'app-main-nav',\n  templateUrl: './main-nav.component.html',\n  styleUrls: ['./main-nav.component.css']\n})\nexport class MainNavComponent {\n\n  language: Language[] = [\n    {value: 'de', viewValue: 'Deutsch'},\n    {value: 'en', viewValue: 'English'}\n  ];\n\n  openDrawer: boolean = false;\n  selectedLanguage: string = this.language[0].value;\n  stkService: StkService;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n    \n  constructor(private breakpointObserver: BreakpointObserver,\n              private authService: AuthService,\n              private router: Router,\n              private translate: TranslateService,\n              stkService: StkService) {\n    this.stkService = stkService;\n  }\n\n  logout(){\n    this.authService.logout();\n    this.router.navigate(['/login'])\n  }\n\n  useLanguage(language: string) {\n    this.translate.use(language);\n    this.selectedLanguage = language;\n  }\n\n  isLoggedIn(){\n    return this.authService.loggedIn();\n  }\n}\n","module.exports = \"mat-card {\\n  max-width: 1300px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 30px;\\n  margin-bottom: 50px;\\n  z-index:0;\\n}\\n\\nmat-checkbox{\\n  margin-right: 20px;\\n}\\n\\nmat-expansion-panel{\\n  margin-top: 30px;\\n}\\n\"","module.exports = \"<mat-card>\\n  <mat-card-title>{{\\\"overview.overview\\\"|translate}}</mat-card-title>\\n  <mat-tab-group>\\n\\n    <mat-tab label=\\\"{{'overview.client'|translate}}\\\">\\n      <app-client-table></app-client-table>\\n    </mat-tab>\\n\\n    <mat-tab label=\\\"{{'overview.list'|translate}}\\\">\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            {{'overview.filter'|translate}}\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <fieldset>\\n          <legend>{{'overview.viewColumn'|translate}}</legend>\\n          <table>\\n            <tr>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"serial\\\" name=\\\"serial\\\"\\n                              (click)=\\\"setRow('serial')\\\">{{'overview.serial'|translate}}\\n                </mat-checkbox>\\n              </td>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"state\\\" name=\\\"state\\\"\\n                              (click)=\\\"setRow('state')\\\">{{'overview.state'|translate}}\\n                </mat-checkbox>\\n              </td>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"description\\\" name=\\\"description\\\"\\n                              (click)=\\\"setRow('description')\\\">{{'overview.description'|translate}}\\n                </mat-checkbox>\\n              </td>\\n            </tr>\\n            <tr>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"brand\\\" name=\\\"brand\\\"\\n                              (click)=\\\"setRow('brand')\\\">{{'overview.brand'|translate}}\\n                </mat-checkbox>\\n              </td>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"department\\\" name=\\\"department\\\"\\n                              (click)=\\\"setRow('department')\\\">{{'overview.department'|translate}}\\n                </mat-checkbox>\\n              </td>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"location\\\" name=\\\"location\\\"\\n                              (click)=\\\"setRow('location')\\\">{{'overview.location'|translate}}\\n                </mat-checkbox>\\n              </td>\\n            </tr>\\n            <tr>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"sla\\\" name=\\\"sla\\\"\\n                              (click)=\\\"setRow('sla')\\\">{{'overview.sla'|translate}}\\n                </mat-checkbox>\\n              </td>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"nextChack\\\" name=\\\"nextCheck\\\"\\n                              (click)=\\\"setRow('nextCheck')\\\">{{'overview.nextCheck'|translate}}\\n                </mat-checkbox>\\n              </td>\\n              <td>\\n                <mat-checkbox class=\\\"example-margin\\\"\\n                              [(ngModel)]=\\\"lastChack\\\" name=\\\"lastCheck\\\"\\n                              (click)=\\\"setRow('lastCheck')\\\">{{'overview.lastCheck'|translate}}\\n                </mat-checkbox>\\n              </td>\\n            </tr>\\n          </table>\\n        </fieldset>\\n        <br>\\n        <fieldset>\\n          <legend>{{'overview.nextCheckUntil'|translate}}</legend>\\n          <mat-form-field>\\n            <input matInput\\n                   [matDatepicker]=\\\"dp3\\\"\\n                   disabled\\n                   [(ngModel)]=\\\"nextCheckDate\\\"\\n                   name=\\\"nextCheckDate\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\n            <mat-label> {{ 'stk.date' | translate}}</mat-label>\\n          </mat-form-field>\\n        </fieldset>\\n        <br>\\n        <fieldset>\\n          <legend>{{'overview.textFilter'|translate}}</legend>\\n          <mat-form-field>\\n            <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n          </mat-form-field>\\n        </fieldset>\\n      </mat-expansion-panel>\\n\\n\\n      <mat-table #myTable [dataSource]=\\\"dataSource\\\" matSort aria-label=\\\"Devices\\\">\\n\\n        <!-- ID Column -->\\n        <ng-container matColumnDef=\\\"id\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.id'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Model Column -->\\n        <ng-container matColumnDef=\\\"model\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.model'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.model}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Next-check Column -->\\n        <ng-container matColumnDef=\\\"nextCheck\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.nextCheck'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.nextCheck}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Last-check Column -->\\n        <ng-container matColumnDef=\\\"lastCheck\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.lastCheck'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.lastCheck}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Serial Column -->\\n        <ng-container matColumnDef=\\\"serial\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.serial'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.serial}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Description Column -->\\n        <ng-container matColumnDef=\\\"description\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.description'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.description}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Department Column -->\\n        <ng-container matColumnDef=\\\"department\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.department'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.department}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Location Column -->\\n        <ng-container matColumnDef=\\\"location\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.location'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.location}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Sla Column -->\\n        <ng-container matColumnDef=\\\"sla\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.sla'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.sla}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- State Column -->\\n        <ng-container matColumnDef=\\\"state\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.state'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.state}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Brand Column -->\\n        <ng-container matColumnDef=\\\"brand\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header>{{'overview.brand'|translate}}</mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\"> {{row.brand}} </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n      </mat-table>\\n      <mat-paginator #paginator\\n                     [length]=\\\"dataSource.data.length\\\"\\n                     [pageIndex]=\\\"0\\\"\\n                     [pageSize]=\\\"20\\\"\\n                     [pageSizeOptions]=\\\"[5, 10, 20, 30]\\\">\\n      </mat-paginator>\\n    </mat-tab>\\n  </mat-tab-group>\\n  <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"waiting\\\"></mat-progress-bar>\\n  <button mat-flat-button (click)=\\\"getDevices()\\\">checkDevices</button>\\n</mat-card>\\n\\n\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatPaginator, MatSort, MatTable, MatTableDataSource} from \"@angular/material\";\nimport {OverviewService} from \"../../services/overview.service\";\n\nexport interface DataTableItem {\n  id: string;\n  model: string;\n  brand: string;\n  serial: string;\n  description: string;\n  department: string;\n  location: string;\n  sla: string;\n  nextCheck: string;\n  lastCheck: string;\n  state: string;\n}\n\n@Component({\n  selector: 'app-overview',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.css']\n})\nexport class OverviewComponent implements OnInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('myTable') table: MatTable<any>;\n\n  model: boolean = true;\n  description: boolean = true;\n  brand: boolean = true;\n  department: boolean = true;\n  location: boolean = true;\n  sla: boolean = true;\n  nextChack: boolean = true;\n  lastChack: boolean = true;\n  serial: boolean = true;\n  state: boolean = true;\n  nextCheckDate: Date;\n  waiting: boolean = false;\n\n  data: Array<DataTableItem> = new Array<DataTableItem>();\n  dataSource = new MatTableDataSource<DataTableItem>();\n\n  displayedColumns = ['id', 'model', 'description',\n    'brand', 'serial', 'department', 'location', 'sla', 'nextCheck', 'lastCheck', 'state'];\n\n\n  setRow(name: string){\n    for(let i = 0; i < this.displayedColumns.length; i++){\n      if(this.displayedColumns[i] == name) {\n        this.displayedColumns.splice(i, 1);\n        return;\n      }\n    }\n    this.displayedColumns.push(name);\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  getDevices() {\n    this.waiting = true;\n    this.dataSource = new MatTableDataSource<DataTableItem>();\n    this.overviewService.getDevices('129').subscribe(\n      data => {\n        if(data){\n          //this.devices = data;\n          //this.dataSource = new MatTableDataSource(this.devices);\n          for(let device of data){\n            let item: DataTableItem = {\n              id: device.id,\n              model: device.model,\n              description: device.description,\n              brand: device.brand,\n              serial: device.serial,\n              department: device.department.toString(),\n              location: device.location,\n              sla: device.location,\n              nextCheck: device.nextCheck,\n              lastCheck: device.lastCheck,\n              state: device.state\n            }\n            this.dataSource.data.push(item);\n          }\n          this.table.renderRows();\n          this.dataSource.sort = this.sort;\n          this.dataSource.paginator = this.paginator;\n          this.waiting = false;\n        }\n        else {\n          console.log(\"Couldn't load devices from server\");\n          this.waiting = false;\n        }\n      });\n  }\n\n  getClients(){\n    this.overviewService.getClients().subscribe(\n        data => {\n          if(data){\n            this.overviewService.clients = data.clients;\n            //this.dataSource = new MatTableDataSource(this.clients);\n          }\n          else {\n            console.log(\"Couldn't load clients from server\");\n          }\n        });\n  }\n\n  constructor(private overviewService: OverviewService) {}\n\n  ngOnInit() {}\n}\n","module.exports = \"table{\\n  text-align: left;\\n}\\n\\nmat-card {\\n  max-width: 1300px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 30px;\\n}\\n\\nmat-card-subtitle{\\n  font-size: large;\\n}\\n\\nmat-form-field{\\n  margin-right: 10px;\\n}\\n\\nbutton{\\n  margin-right: 10px;\\n}\\n\\nfieldset{\\n  margin-top: 20px;\\n}\\n\\ntable{\\n  min-width: 400px;\\n}\\n\\na{\\n  padding-top: 20px;\\n}\\n\"","module.exports = \"<mat-card>\\n  <mat-card-title>\\n    {{('profile.tools'| translate)}}\\n  </mat-card-title>\\n  <mat-card-subtitle>\\n    {{('profile.favorites'| translate)}}\\n  </mat-card-subtitle>\\n  <mat-card-content>\\n\\n    <form (ngSubmit)=\\\"onSubmitAddTool()\\\" #addToolForm=\\\"ngForm\\\">\\n      <mat-form-field>\\n        <input matInput\\n               [(ngModel)]=\\\"id\\\"\\n               name=\\\"id\\\" required\\n               minlength=\\\"5\\\"\\n               maxlength=\\\"8\\\">\\n        <mat-label>{{('profile.id'| translate)}}</mat-label>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <input matInput\\n               [(ngModel)]=\\\"description\\\"\\n               name=\\\"description\\\" required>\\n        <mat-label>{{('profile.description'| translate)}}</mat-label>\\n      </mat-form-field>\\n      <button mat-flat-button type=\\\"submit\\\"\\n              [disabled]=\\\"!addToolForm.form.valid || alreadyAdded()\\\">\\n        {{('profile.add'| translate)}}\\n      </button>\\n    </form>\\n\\n    <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"waiting\\\"></mat-progress-bar>\\n\\n    <fieldset>\\n      <legend>{{('profile.tools'| translate)}}</legend>\\n      <table>\\n        <tr>\\n          <th>{{('profile.id'| translate)}}</th>\\n          <th>{{('profile.description'| translate)}}</th>\\n        </tr>\\n        <tr *ngFor=\\\"let tool of toolService.tools\\\">\\n          <td>{{tool.id}}</td>\\n          <td>{{tool.description}}</td>\\n          <td>\\n            <button mat-icon-button color=\\\"primary\\\" (click)=\\\"deleteTool(tool)\\\" color=\\\"warn\\\">\\n              <mat-icon aria-label=\\\"delete\\\">delete</mat-icon>\\n            </button>\\n          </td>\\n        </tr>\\n      </table>\\n    </fieldset>\\n\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card>\\n  <mat-card-title>\\n    {{('profile.particulars'| translate)}}\\n  </mat-card-title>\\n  <mat-card-subtitle>\\n    {{('profile.overview'| translate)}}\\n  </mat-card-subtitle>\\n  <mat-card-content>\\n    <table>\\n      <tr>\\n        <th>{{('profile.name'| translate)}}</th>\\n        <td>{{getUser().name}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{('profile.mail'| translate)}}</th>\\n        <td>{{getUser().email}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{('profile.username'| translate)}}</th>\\n        <td>{{getUser().username}}</td>\\n      </tr>\\n    </table>\\n    <p>\\n      <a href=\\\"mailto:ckiser@hospitec.ch?Subject=Fehlerhafte Personalien&body=Fehlerbeschreibung:\\\">\\n        {{('profile.mistake'| translate)}}\\n      </a>\\n    </p>\\n  </mat-card-content>\\n  <mat-divider></mat-divider>\\n\\n  <br>\\n  <mat-card-subtitle>\\n    {{('profile.changePassword'| translate)}}\\n  </mat-card-subtitle>\\n  <mat-card-content>\\n\\n    <form (ngSubmit)=\\\"onSubmitChangePW()\\\" #changePasswordForm=\\\"ngForm\\\">\\n\\n      <mat-form-field>\\n        <input matInput type=\\\"password\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"currentPW\\\" name=\\\"currentPW\\\" required>\\n        <mat-label>{{('profile.currentPassword'| translate)}}</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput type=\\\"password\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"newPW\\\" name=\\\"newPW\\\" required>\\n        <mat-label>{{('profile.newPassword'| translate)}}</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput type=\\\"password\\\" autocomplete=\\\"off\\\" [(ngModel)]=\\\"confNewPW\\\" name=\\\"confNewPW\\\" required>\\n        <mat-label>{{('profile.confirmPassword'| translate)}}</mat-label>\\n      </mat-form-field>\\n\\n      <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!changePasswordForm.form.valid\\\">\\n        {{('profile.changePassword'| translate)}}\\n      </button>\\n\\n    </form>\\n  </mat-card-content>\\n</mat-card>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService, User} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {Tool, ToolService} from \"../../services/tool.service\";\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: User;\n  tools: Array<Tool>;\n  id: string;\n  description: string;\n  newTool: Tool;\n  currentPW: string;\n  newPW: string;\n  confNewPW: string;\n  waiting = false;\n\n  constructor(private authService: AuthService,\n              private router: Router,\n              private toolService: ToolService) {\n  }\n\n  getUser() {\n    this.user = JSON.parse(localStorage.getItem('user'));\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  onSubmitAddTool() {\n    this.waiting = true;\n    this.getUser();\n    this.newTool = {\n      userName: this.user.username,\n      id: this.id,\n      description: this.description\n    }\n    this.toolService.addTool(this.newTool).subscribe(\n      data => {\n        this.id = '';\n        this.description = '';\n        this.toolService.getTools();\n        this.waiting = false;\n      },\n      err =>{\n        console.log(err);\n        this.waiting = false;\n      });\n  }\n\n  deleteTool(tool: Tool) {\n    this.waiting = true;\n    this.toolService.deleteTool(tool).subscribe(\n      data => {\n        this.toolService.getTools();\n        this.waiting = false;\n      },\n      err =>{\n        console.log(err);\n        this.waiting = false;\n      });;\n  }\n\n  onSubmitChangePW() {\n\n  }\n\n  ngOnInit() {\n    if (!this.toolService.tools) {\n      this.toolService.getTools();\n    }\n    this.authService.getProfile().subscribe(\n      profile => {\n        this.user = profile;\n      },\n      err => {\n        console.log(err);\n      })\n  }\n\n  alreadyAdded() {\n    let result = false;\n    if(this.toolService.tools && (this.toolService.tools.length > 0))\n    for (let tool of this.toolService.tools) {\n      if(tool.id == this.id) result = true;\n    }\n    return result;\n  }\n}\n","module.exports = \"mat-card{\\n  max-width: 600px;\\n  max-height: 600px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 100px;\\n  text-align: center;\\n}\\n\\nmat-form-field{\\n  width: 100%;\\n\\n}\\n\\nh1, h2{\\n  text-align: center;\\n}\\n\\nmat-card-header {\\n  text-align: center;\\n}\\n\\n.icon{\\n  font-size: larger;\\n}\\n\\nmat-card-content{\\n  max-width: 400px;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n\\nbutton{\\n  width: 100%;\\n  margin-top: 20px;\\n  margin-bottom: 20px;\\n  max-width: 80%;\\n}\\n\\nmat-card-header{\\n  margin-top: 100px;\\n}\\n\\n.logo{\\n  width: 300px;\\n  margin-bottom: 20px;\\n  margin-top: 20px;\\n}\\n\"","module.exports = \"<mat-card>\\n  <mat-card-title>\\n    <img class=\\\"logo\\\" src=\\\"/assets/images/hospitoolLogo.png\\\">\\n  </mat-card-title>\\n\\n  <mat-card-content>\\n    <form (ngSubmit)=\\\"onRegisterSubmit()\\\" #registerForm=\\\"ngForm\\\">\\n      <mat-form-field>\\n        <input matInput [(ngModel)]=\\\"firstname\\\" name=\\\"firstname\\\" required>\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>person</mat-icon>&nbsp;</span>\\n        <mat-label> **firstname**</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput [(ngModel)]=\\\"lastname\\\" name=\\\"lastname\\\" required>\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>person</mat-icon>&nbsp;</span>\\n        <mat-label> **lastname**</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput [(ngModel)]=\\\"username\\\" name=\\\"username\\\" required>\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>person</mat-icon>&nbsp;</span>\\n        <mat-label> **Username**</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput [(ngModel)]=\\\"email\\\" name=\\\"email\\\" required>\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>email</mat-icon>&nbsp;</span>\\n        <mat-label> **email**</mat-label>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <input matInput type=\\\"password\\\" [(ngModel)]=\\\"password\\\" name=\\\"password\\\" required>\\n        <span matPrefix class=\\\"icon\\\"><mat-icon>vpn_key</mat-icon>&nbsp;</span>\\n        <mat-label>**Passwort**</mat-label>\\n      </mat-form-field>\\n\\n      <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!registerForm.form.valid\\\">**Submit**</button>\\n    </form>\\n  </mat-card-content>\\n</mat-card>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ValidateService} from \"../../services/validate.service\";\nimport {FlashMessagesService} from \"angular2-flash-messages\";\nimport {AuthService} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  firstname: String;\n  lastname: String;\n  username: String;\n  email: String;\n  password: String;\n\n  constructor(private validateService: ValidateService,\n              private flashMessage: FlashMessagesService,\n              private authService: AuthService,\n              private router: Router) {\n  }\n\n\n  ngOnInit() {\n  }\n\n  onRegisterSubmit() {\n    const user = {\n      name: this.firstname + \" \" + this.lastname,\n      username: this.username,\n      email: this.email,\n      password: this.password,\n    }\n\n    // Checks for empty fields\n    if (!this.validateService.validateRegister(user)) {\n      this.flashMessage.show('Still empty fields', {cssClass: 'alert-danger', timeout: 2000});\n      return false\n    }\n\n    // Validate the email format\n    if (!this.validateService.validateEmail(this.email)) {\n      this.flashMessage.show('**Invalid email format**', {cssClass: 'alert-danger', timeout: 2000});\n      return false;\n    }\n\n   this.authService.registerUser(user).subscribe(data => {\n      if(data.success == true){\n        this.flashMessage.show('**The user was successfully created**', {cssClass: 'alert-success', timeout: 2000});\n        console.log(data);\n        this.router.navigate(['/login']);\n      }\n      else {\n        this.flashMessage.show(data.msg, {cssClass: 'alert-danger', timeout: 2000});\n        console.log(data);\n      }\n   });\n  }\n}\n","module.exports = \"table{\\n  width: 100%;\\n}\\n\\n.mat-row:hover{\\n  background: #f5f5f5;\\n}\\n\\n.filter{\\n  margin-top: 20px;\\n}\\n\\n.refreshButton{\\n  margin-top: 20px;\\n  float: right;\\n}\\n\"","module.exports = \"<mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"waiting\\\"></mat-progress-bar>\\n\\n<mat-form-field class=\\\"filter\\\">\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<button mat-flat-button color=\\\"primary\\\" class=\\\"refreshButton\\\" (click)=\\\"updateClientList()\\\">\\n  <mat-icon aria-label=\\\"refresh button\\\">refresh</mat-icon>\\n  <span>&nbsp; {{\\\"search.refresh\\\"|translate}}</span>\\n</button>\\n\\n<mat-table #myTable [dataSource]=\\\"dataSource\\\" matSort matSortActive=\\\"id\\\" matSortDirection=\\\"asc\\\">\\n  <!--[dataSource]=\\\"clientService.dataSource\\\"-->\\n\\n  <!-- Id Column -->\\n  <ng-container matColumnDef=\\\"id\\\">\\n    <mat-header-cell *matHeaderCellDef mat-sort-header>{{\\\"search.nr\\\"|translate}}</mat-header-cell>\\n    <mat-cell  *matCellDef=\\\"let row\\\">{{row.id}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <mat-header-cell *matHeaderCellDef mat-sort-header>{{\\\"search.name\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"street\\\">\\n    <mat-header-cell *matHeaderCellDef >{{\\\"search.street\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let row\\\">{{row.street +\\\" \\\"+ row.houseNr}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Zip Column -->\\n  <ng-container matColumnDef=\\\"zip\\\">\\n    <mat-header-cell *matHeaderCellDef>{{\\\"search.zip\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let row\\\">{{row.zip}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"city\\\">\\n    <mat-header-cell *matHeaderCellDef>{{\\\"search.city\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let row\\\">{{row.city}}</mat-cell>\\n  </ng-container>\\n\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" (click)=\\\"selectClient(row)\\\"></mat-row>\\n</mat-table>\\n<mat-paginator #paginator\\n               [length]=\\\"dataSource.data.length\\\"\\n               [pageIndex]=\\\"0\\\"\\n               [pageSize]=\\\"20\\\"\\n               [pageSizeOptions]=\\\"[5, 10, 20, 30]\\\">\\n</mat-paginator>\\n\"","import {Component, EventEmitter, OnInit, Output, ViewChild} from '@angular/core';\nimport {Client, ClientService} from \"../../../services/client.service\";\nimport {SearchPageService} from \"../../../services/search-page.service\";\nimport {MatPaginator, MatSort, MatTable, MatTableDataSource} from \"@angular/material\";\nimport {DataTableItem} from \"../../overview/overview.component\";\nimport {Device} from \"../../../services/device.service\";\n\n@Component({\n  selector: 'app-client-table',\n  templateUrl: './client-table.component.html',\n  styleUrls: ['./client-table.component.css']\n})\nexport class ClientTableComponent implements OnInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('myTable') table: MatTable<any>;\n  dataSource = new MatTableDataSource<Client>();\n  waiting: boolean = false;\n  clients: Array<Client>;\n  public clientService;\n  @Output() updateEvent = new EventEmitter();\n\n  /* Columns displayed in the table */\n  displayedColumns = ['id', 'name', 'street', 'zip', 'city'];\n\n  constructor(clientService: ClientService,\n              private searchPageService: SearchPageService) {\n    this.clientService = clientService\n  }\n\n  selectClient(client: Client){\n    this.searchPageService.resetDevice();\n    this.searchPageService.devices = new Array<Device>();\n    this.searchPageService.selectClient(client).subscribe(\n      data => {\n        if (data) {\n          this.searchPageService.devices = data;\n          this.updateEvent.emit(null);\n        }\n        else {\n          console.log(\"Couldn't load clients from server\");\n        }\n      });\n  }\n\n  updateClientList(){\n    this.waiting = true;\n    this.clientService.clients = new Array<Client>();\n    this.dataSource = new MatTableDataSource<Client>();\n    this.clientService.getClients().subscribe(\n      data => {\n        if (data) {\n          for(let item of data.clients){\n            let client: Client = {\n              id: item.id,\n              nr: item.nr,\n              name: item.name,\n              street: item.street,\n              houseNr: item.houseNr,\n              zip: item.zip,\n              city: item.city,\n            }\n            this.dataSource.data.push(client);\n            this.clientService.clients.push(client);\n          }\n          this.table.renderRows();\n          this.dataSource.sort = this.sort;\n          this.dataSource.paginator = this.paginator;\n          this.waiting = false;\n        }\n        else {\n          console.log(\"Couldn't load clients from server\");\n          this.waiting = false;\n        }\n      });\n  }\n\n  updateClientListFromService(){\n    this.dataSource = new MatTableDataSource<Client>();\n    for(let client of this.clientService.clients){\n      this.dataSource.data.push(client);\n    }\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.waiting = false;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  ngOnInit() {\n    this.waiting = true;\n    if(this.clientService.clients.length == 0){\n      this.updateClientList();\n    }\n    else{\n      this.updateClientListFromService();\n    }\n  }\n}\n","module.exports = \"table{\\n  width: 100%;\\n}\\n\\n.mat-row:hover{\\n  background: #f5f5f5;\\n}\\n\\n.refreshButton{\\n  margin-top: 20px;\\n  float: right;\\n}\\n\"","module.exports = \"<mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"waiting\\\"></mat-progress-bar>\\n\\n<mat-form-field>\\n  <input matInput (keyup)=\\\"deviceService.applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n\\n<button mat-flat-button color=\\\"primary\\\" class=\\\"refreshButton\\\" (click)=\\\"updateDeviceList()\\\">\\n  <mat-icon aria-label=\\\"refresh button\\\">refresh</mat-icon>\\n  <span> &nbsp; {{\\\"search.refresh\\\"|translate}}</span>\\n</button>\\n\\n<mat-table  #myTable [dataSource]=\\\"dataSource\\\" matSort matSortActive=\\\"id\\\" matSortDirection=\\\"asc\\\">\\n\\n  <!-- Id Column -->\\n  <ng-container matColumnDef=\\\"id\\\" >\\n    <mat-header-cell *matHeaderCellDef mat-sort-header>{{\\\"search.id\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let device\\\">{{device.id}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"model\\\">\\n    <mat-header-cell *matHeaderCellDef >{{\\\"search.model\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let device\\\">{{device.model}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"serial\\\">\\n    <mat-header-cell mat-header-cell *matHeaderCellDef >{{\\\"search.serial\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let device\\\">{{device.serial}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Zip Column -->\\n  <ng-container matColumnDef=\\\"description\\\">\\n    <mat-header-cell *matHeaderCellDef >{{\\\"search.description\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let device\\\">{{device.description}}</mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"nextCheck\\\">\\n    <mat-header-cell *matHeaderCellDef >{{\\\"search.nextCheck\\\"|translate}}</mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let device\\\">{{device.nextCheck}}</mat-cell>\\n  </ng-container>\\n\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let device; columns: displayedColumns;\\\" (click)=\\\"selectDevice(device)\\\"></mat-row>\\n</mat-table>\\n\\n<mat-paginator #paginator\\n               [length]=\\\"dataSource.data.length\\\"\\n               [pageIndex]=\\\"0\\\"\\n               [pageSize]=\\\"20\\\"\\n               [pageSizeOptions]=\\\"[5, 10, 20, 30]\\\">\\n</mat-paginator>\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Device, DeviceService} from \"../../../services/device.service\";\nimport {MatPaginator, MatSort, MatTable, MatTableDataSource} from \"@angular/material\";\nimport {SearchPageService} from \"../../../services/search-page.service\";\nimport {Client} from \"../../../services/client.service\";\n\n@Component({\n  selector: 'app-device-table',\n  templateUrl: './device-table.component.html',\n  styleUrls: ['./device-table.component.css']\n})\nexport class DeviceTableComponent implements OnInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('myTable') table: MatTable<any>;\n  dataSource;\n  waiting: boolean = false;\n  devices: Array<Device> = new Array<Device>();\n  public deviceService;\n\n  /* Columns displayed in the table */\n  displayedColumns = ['id', 'model', 'serial', 'description', 'nextCheck'];\n\n  constructor(deviceService: DeviceService,\n              private searchPageService: SearchPageService) {\n    this.deviceService = deviceService;\n  }\n\n  selectDevice(device: Device) {\n    this.searchPageService.selectDevice(device);\n  }\n\n  getData() {\n    console.log(\"updated\");\n    this.waiting = true;\n    this.dataSource = new MatTableDataSource<Device>();\n    for(let device of this.searchPageService.devices){\n      this.dataSource.data.push(device);\n    }\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.waiting = false;\n  }\n\n  updateDeviceList(){\n    this.waiting = true;\n    this.deviceService.getDevices(this.searchPageService.selectedClient.id).subscribe(\n      data => {\n        if (data) {\n          this.searchPageService.devices = data;\n          this.getData();\n        }\n        else {\n          console.log(\"Couldn't load clients from server\");\n        }\n      });\n  }\n\n  ngOnInit() {\n      this.getData();\n  }\n}\n","module.exports = \"mat-card {\\n  max-width: 1300px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 30px;\\n  z-index:0;\\n}\\n\\nfieldset{\\n  margin-top: 20px;\\n}\\n\\ntable{\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  text-align: left;\\n  vertical-align: text-top;\\n}\\n\\ntd, th{\\n  vertical-align: text-top;\\n  text-align: left;\\n}\\n\\ntd{\\n  padding-right: 30px;\\n}\\n\\nbutton{\\n  margin-top: 20px;\\n}\\n\\n.info{\\n  color: green;\\n}\\n\"","module.exports = \"<mat-card>\\n  <mat-tab-group [(selectedIndex)]=\\\"searchPageService.activeTab\\\">\\n    <mat-tab label=\\\"{{'search.client'|translate}}\\\">\\n      <app-client-table (updateEvent)=\\\"clientTable.getData()\\\"></app-client-table>\\n    </mat-tab>\\n    <mat-tab label=\\\"{{'search.devices'|translate}}\\\" [disabled]=\\\"!searchPageService.selectedClient\\\">\\n      <h2 *ngIf=\\\"searchPageService.selectedClient\\\">\\n        {{getSelectedClient().name}}\\n      </h2>\\n      <app-device-table #clientTable></app-device-table>\\n    </mat-tab>\\n    <mat-tab label=\\\"{{'search.infos'|translate}}\\\" [disabled]=\\\"!searchPageService.selectedDevice\\\">\\n      <fieldset>\\n        <legend>{{'search.device'|translate}}</legend>\\n        <table *ngIf=\\\"searchPageService.selectedDevice\\\">\\n          <tr>\\n            <th>{{'search.id'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.id}}</td>\\n            <th>{{'search.serial'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.serial}}</td>\\n          </tr>\\n          <tr>\\n            <th>{{'search.model'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.model}}</td>\\n            <th>{{'search.year'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.year}}</td>\\n          <tr>\\n            <th>{{'search.description'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.description}}</td>\\n            <th>{{'search.brand'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.brand}}</td>\\n          </tr>\\n          <tr>\\n            <th>{{'search.department'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.department}}</td>\\n            <th>{{'search.nextCheck'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.nextCheck}}</td>\\n          </tr>\\n          <tr>\\n            <th>{{'search.location'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.location}}</td>\\n            <th>{{'search.lastCheck'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.lastCheck}}</td>\\n          </tr>\\n          <tr>\\n            <th>{{'search.contract'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.contract}}</td>\\n            <th>{{'search.contractNr'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.contractNr}}</td>\\n          </tr>\\n          <tr>\\n            <th>{{'search.interval'|translate}}</th>\\n            <td>{{searchPageService.selectedDevice.interval}}</td>\\n          </tr>\\n        </table>\\n      </fieldset>\\n\\n      <fieldset>\\n        <legend>{{'search.client'|translate}}</legend>\\n        <table *ngIf=\\\"searchPageService.selectedClient\\\">\\n          <tr>\\n            <th>{{'search.name'|translate}}</th>\\n            <td>{{searchPageService.selectedClient.name}}</td>\\n          </tr>\\n          <tr>\\n            <th>{{'search.street'|translate}}</th>\\n            <td>{{searchPageService.selectedClient.street +' '+ searchPageService.selectedClient.houseNr}}</td>\\n          <tr>\\n            <th>{{'search.city'|translate}}</th>\\n            <td>{{searchPageService.selectedClient.zip + ' ' + searchPageService.selectedClient.city}}</td>\\n          </tr>\\n        </table>\\n      </fieldset>\\n\\n      <button mat-flat-button color=\\\"primary\\\"\\n              [disabled]=\\\"alreadyLoaded()\\\"\\n              (click)=\\\"createReport()\\\">\\n        {{'search.loadReport'|translate}}\\n      </button>\\n      <p *ngIf=\\\"alreadyLoaded()\\\" class=\\\"info\\\">\\n        <mat-icon>info</mat-icon>\\n        {{'search.alreadyLoaded'|translate}}\\n      </p>\\n    </mat-tab>\\n  </mat-tab-group>\\n</mat-card>\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {SearchPageService} from \"../../services/search-page.service\";\nimport {Client} from \"../../services/client.service\";\nimport {StkService} from \"../../services/stk.service\";\nimport {DeviceTableComponent} from \"./device-table/device-table.component\";\n\n\n@Component({\n  selector: 'app-search-by-client',\n  templateUrl: './search-by-client.component.html',\n  styleUrls: ['./search-by-client.component.css']\n})\n\nexport class SearchByClientComponent implements OnInit {\n\n  @ViewChild('myTable') deviceTable: DeviceTableComponent;\n  searchPageService: SearchPageService;\n\n  constructor(searchPageService: SearchPageService,\n              private stkService: StkService) {\n    this.searchPageService = searchPageService;\n  }\n\n  getSelectedClient(): Client {\n    return this.searchPageService.selectedClient;\n  }\n\n  createReport() {\n    this.stkService.createReport();\n  }\n\n  alreadyLoaded() {\n    let result = false;\n    for (let i of this.stkService.reports) {\n      if (this.searchPageService.selectedDevice) {\n        if (i.device.id == this.searchPageService.selectedDevice.id) {\n          if (i.client.id == this.searchPageService.selectedClient.id) result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  /*\n  showDevices(){\n    return this.searchPageService.showDevices;\n  }\n  */\n\n  ngOnInit() {\n  }\n}\n","module.exports = \"\"","module.exports = \"<div>\\n  <mat-form-field>\\n    <mat-label>{{\\\"stk.serviceKit\\\"|translate}}</mat-label>\\n    <mat-select [(value)]=\\\"stkService.selectedReport.serviceKit\\\">\\n      <mat-option *ngFor=\\\"let serviceKit of serviceKits\\\" [value]=\\\"serviceKit.value\\\">\\n        {{serviceKit.value}}\\n        <small>{{serviceKit.viewValue}}</small>\\n      </mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n</div>\\n\\n<mat-form-field>\\n  <mat-label>{{\\\"stk.state\\\"|translate}}</mat-label>\\n  <mat-select [(value)]=\\\"stkService.selectedReport.state\\\">\\n    <mat-option value=\\\"passed\\\" *ngIf=\\\"stkService.selectedReport.testProcedure.validationCheck()\\\">\\n      {{\\\"stk.passed\\\"|translate}}\\n    </mat-option>\\n    <mat-option value=\\\"notFound\\\" *ngIf=\\\"!stkService.selectedReport.testProcedure.validationCheck()\\\">\\n      {{\\\"stk.notFound\\\"|translate}}\\n    </mat-option>\\n    <mat-option value=\\\"notAvailable\\\" *ngIf=\\\"!stkService.selectedReport.testProcedure.validationCheck()\\\">\\n      {{\\\"stk.notAvailable\\\"|translate}}\\n    </mat-option>\\n    <mat-option value=\\\"unfinished\\\">{{\\\"stk.unfinished\\\"|translate}}</mat-option>\\n    <mat-option value=\\\"repairNeeds\\\">{{\\\"stk.repairNeeds\\\"|translate}}</mat-option>\\n    <mat-option value=\\\"outOfService\\\" *ngIf=\\\"!stkService.selectedReport.testProcedure.validationCheck()\\\">\\n      {{\\\"stk.outOfService\\\"|translate}}\\n    </mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\\n<div>\\n  <mat-form-field>\\n    <mat-label>{{\\\"stk.comments\\\"|translate}}</mat-label>\\n    <textarea matInput [(ngModel)]=\\\"stkService.selectedReport.comment\\\"></textarea>\\n  </mat-form-field>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {StkService} from \"../../../services/stk.service\";\n\n@Component({\n  selector: 'app-conclusion',\n  templateUrl: './conclusion.component.html',\n  styleUrls: ['./conclusion.component.css']\n})\nexport class ConclusionComponent implements OnInit {\n\n  stkService;\n  year = new Date().getFullYear();\n\n  serviceKits = [\n    {viewValue: '', value: '-'},\n    {viewValue: `(${this.year + 1})`, value: '1'},\n    {viewValue: `(${this.year + 2})`, value: '2'},\n    {viewValue: `(${this.year + 3})`, value: '3'},\n    {viewValue: `(${this.year + 4})`, value: '4'},\n    {viewValue: `(${this.year + 5})`, value: '5'},\n    {viewValue: `(${this.year + 6})`, value: '6'},\n    {viewValue: `(${this.year + 7})`, value: '7'},\n    {viewValue: `(${this.year + 8})`, value: '8'},\n    {viewValue: `(${this.year + 10})`, value: '10'},\n    {viewValue: `(${this.year + 12})`, value: '12'}\n  ];\n\n  constructor(stkService: StkService) {\n    this.stkService = stkService;\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"table{\\n  text-align: left;\\n}\\n\\ntd{\\n  padding-right: 20px;\\n}\\n\\nmat-form-field{\\n  width: 90%;\\n}\\n\"","module.exports = \"<mat-tab-group *ngIf=\\\"stkService.selectedReport\\\">\\n  <mat-tab label=\\\"{{'stk.device' | translate}}\\\">\\n    <br>\\n    <table>\\n      <tr>\\n        <th>{{\\\"stk.id\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.id}}</td>\\n        <th>{{\\\"stk.serial\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.serial}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{\\\"stk.model\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.model}}</td>\\n        <th>{{\\\"stk.year\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.year}}</td>\\n      <tr>\\n        <th>{{\\\"stk.description\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.description}}</td>\\n        <th>{{\\\"stk.brand\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.brand}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{\\\"stk.department\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.department}}</td>\\n        <th>{{\\\"stk.nextCheck\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.nextCheck}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{\\\"stk.location\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.location}}</td>\\n        <th>{{\\\"stk.lastCheck\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.lastCheck}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{\\\"stk.contract\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.contract}}</td>\\n        <th>{{\\\"stk.contractNr\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.contractNr}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{\\\"stk.interval\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.device.interval}}</td>\\n      </tr>\\n    </table>\\n  </mat-tab>\\n  <mat-tab label=\\\"{{'stk.client' | translate}}\\\">\\n    <br>\\n    <table>\\n      <tr>\\n        <th>{{\\\"stk.name\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.client.name}}</td>\\n      </tr>\\n      <tr>\\n        <th>{{\\\"stk.street\\\" | translate}}</th>\\n        <td>{{stkService.selectedReport.client.street +\\\" \\\"+ stkService.selectedReport.client.houseNr}}</td>\\n      <tr>\\n        <th>{{\\\"stk.city\\\" | translate}}</th>\\n      <td>{{stkService.selectedReport.client.zip}} {{stkService.selectedReport.client.city}}</td>\\n      </tr>\\n    </table>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"{{'stk.corrections' | translate}}\\\">\\n    <br>\\n    <mat-grid-list cols=\\\"2\\\" rowHeight=\\\"60\\\">\\n      <mat-grid-tile\\n        [colspan]=\\\"1\\\"\\n        [rowspan]=\\\"1\\\">\\n        <mat-form-field>\\n          <input [(ngModel)]=\\\"stkService.selectedReport.corrections.id\\\" matInput>\\n          <mat-label>{{\\\"stk.id\\\" | translate}}</mat-label>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile\\n        [colspan]=\\\"1\\\"\\n        [rowspan]=\\\"1\\\">\\n        <mat-form-field>\\n          <input [(ngModel)]=\\\"stkService.selectedReport.corrections.serial\\\" matInput>\\n          <mat-label>{{\\\"stk.serial\\\" | translate}}</mat-label>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile\\n        [colspan]=\\\"1\\\"\\n        [rowspan]=\\\"1\\\">\\n        <mat-form-field>\\n          <input [(ngModel)]=\\\"stkService.selectedReport.corrections.model\\\" matInput>\\n          <mat-label>{{\\\"stk.model\\\" | translate}}</mat-label>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile\\n        [colspan]=\\\"1\\\"\\n        [rowspan]=\\\"1\\\">\\n        <mat-form-field>\\n          <input [(ngModel)]=\\\"stkService.selectedReport.corrections.year\\\"\\n                 type=\\\"number\\\"\\n                 step=\\\"1\\\"\\n                 min=\\\"1950\\\"\\n                 [max]=\\\"checkMaxYear()\\\"\\n                 matInput>\\n          <mat-label>{{\\\"stk.year\\\" | translate}}</mat-label>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile\\n        [colspan]=\\\"1\\\"\\n        [rowspan]=\\\"1\\\">\\n        <mat-form-field>\\n          <input [(ngModel)]=\\\"stkService.selectedReport.corrections.location\\\" matInput>\\n          <mat-label>{{\\\"stk.location\\\" | translate}}</mat-label>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n      <mat-grid-tile\\n        [colspan]=\\\"1\\\"\\n        [rowspan]=\\\"1\\\">\\n        <mat-form-field>\\n          <input [(ngModel)]=\\\"stkService.selectedReport.corrections.department\\\" matInput>\\n          <mat-label>{{\\\"stk.department\\\" | translate}}</mat-label>\\n        </mat-form-field>\\n      </mat-grid-tile>\\n\\n    </mat-grid-list>\\n  </mat-tab>\\n</mat-tab-group>\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {SearchPageService} from \"../../../services/search-page.service\";\nimport {StkService} from \"../../../services/stk.service\";\n\n@Component({\n  selector: 'app-infos',\n  templateUrl: './infos.component.html',\n  styleUrls: ['./infos.component.css']\n})\nexport class InfosComponent implements OnInit {\n\n  id: String;\n  serial: String;\n  model: String;\n  year: String;\n  location: String;\n  department: String;\n  stkService: StkService;\n\n  constructor(private searchPageService: SearchPageService,\n              stkService: StkService) {\n    this.stkService = stkService;\n  }\n\n  checkMaxYear(){\n    return new Date().getFullYear();\n  }\n\n  ngOnInit() {}\n}\n","module.exports = \"\"","module.exports = \"<mat-dialog-content>\\n  <div>\\n    <app-preview></app-preview>\\n  </div>\\n</mat-dialog-content>\\n\\n<mat-dialog-actions>\\n  <div class=\\\"button-row\\\">\\n    <button mat-button mat-dialog-close>\\n      {{ 'preview.close' | translate}}\\n    </button>\\n  </div>\\n</mat-dialog-actions>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {User} from \"../../../../services/auth.service\";\n\n@Component({\n  selector: 'app-preview-report-dialog',\n  templateUrl: './preview-report-dialog.component.html',\n  styleUrls: ['./preview-report-dialog.component.css']\n})\nexport class PreviewReportDialogComponent implements OnInit {\n\n\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","module.exports = \".headerTable{\\n  width: 18.3cm;\\n  border-spacing:0;\\n  border-collapse:collapse;\\n}\\n\\n.workTable{\\n  width: 18.3cm;\\n  border-spacing:0;\\n  border-collapse:collapse;\\n  border: black solid 1px;\\n  margin-top: 5px;\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n  text-align: left;\\n}\\n\\n.sparePartTable{\\n  width: 18.3cm;\\n  border-spacing:0;\\n  border-collapse:collapse;\\n  border: black solid 1px;\\n  margin-top: 5px;\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n  text-align: left;\\n}\\n\\n.footerTable{\\n  width: 18.3cm;\\n  border-spacing:0;\\n  border-collapse:collapse;\\n  border: black solid 1px;\\n  margin-top: 5px;\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n  text-align: left;\\n}\\n\\n.sparePartCell{\\n  border: black dotted 1px;\\n}\\n\\n.headerTableTwo{\\n  border-spacing:0;\\n  border-collapse:collapse;\\n  border: 1px solid black;\\n  width: 18.3cm;\\n}\\n\\n.footerCell{\\n  border: black solid 1px;\\n}\\n\\n.borderLeft{\\n  border-top: 1px solid black;\\n  border-left: 1px solid black;\\n}\\n\\n.borderRight{\\n  border-top: 1px solid black;\\n  border-right: 1px solid black;\\n}\\n\\n.firstCol{\\n  width: 6.4cm;\\n  vertical-align: text-top;\\n  padding-left: 10px;\\n  padding-top: 10px;\\n}\\n\\n.secondCol{\\n  width: 45%;\\n}\\n\\n.logo{\\n  max-width: 5cm;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n\\n.reportTitle{\\n  text-align: center;\\n  border: 1px solid black;\\n}\\n\\n.topBorder{\\n  border-top: 1px solid black;\\n}\\n\\n.qrCode{\\n  text-align: center;\\n}\\n\\n.textTop{\\n  vertical-align: text-top;\\n}\\n\\n.checkTable{\\n  text-align: left;\\n  border-spacing:0;\\n  border-collapse:collapse;\\n  width: 18.3cm;\\n\\n}\\n\\nhr{\\n  margin-bottom: 30px;\\n  margin-top: 30px;\\n}\\n\\n.checkTableDiv{\\n  margin-top: 10px;\\n}\\n\\n.checkTableCol2{\\n  max-width: 6.3cm;\\n  min-width: 6.3cm;\\n}\\n\\n.checkTableCol3{\\n  min-width: 2.1cm;\\n  max-width: 2.1cm;\\n}\\n\\n.checkTableComment{\\n  min-width: 2.9cm;\\n  max-width: 2.9cm;\\n}\\n\\n.textCenter{\\n  text-align: center;\\n}\\n\\n.greyBack{\\n  background-color: lightgrey;\\n}\\n\"","module.exports = \"<table class=\\\"headerTable\\\">\\n  <tr>\\n    <td>\\n      <div class=\\\"logo\\\">\\n        <img class=\\\"logo\\\" src=\\\"/src/assets/images/hospitoolLogo.png\\\"\\n             style='height: 100%; width: 100%; object-fit: contain;'/>\\n      </div>\\n    </td>\\n    <td colspan=\\\"2\\\" class=\\\"reportTitle\\\">\\n      <b>STK</b><br>\\n      {{ 'preview.safetyCheck' | translate}}\\n    </td>\\n    <td colspan=\\\"2\\\" class=\\\"qrCode\\\">\\n      QR-CODE\\n    </td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\\"5\\\" style=\\\"height: 20px;\\\"></td>\\n  </tr>\\n  <tr>\\n    <td rowspan=\\\"5\\\" class=\\\"borderLeft textTop\\\">\\n      <b>\\n        {{stkService.selectedReport.client.name}}<br>\\n        {{stkService.selectedReport.client.street}}<br>\\n        {{stkService.selectedReport.client.zip}} {{stkService.selectedReport.client.city}} <br>\\n      </b>\\n    </td>\\n    <td rowspan=\\\"5\\\" class=\\\"borderLeft textTop\\\">\\n      {{ 'preview.id' | translate}}<br>\\n      {{ 'preview.sn' | translate}}<br>\\n      {{ 'preview.model' | translate}}\\n    </td>\\n    <td rowspan=\\\"5\\\">\\n      <b>\\n        {{stkService.selectedReport.device.id}}<br>\\n        {{stkService.selectedReport.device.serial}}<br>\\n        {{stkService.selectedReport.device.model}}<br>\\n        {{stkService.selectedReport.device.description}}<br>\\n        {{stkService.selectedReport.device.brand}}<br>\\n      </b>\\n    </td>\\n    <td rowspan=\\\"5\\\" class=\\\"borderLeft textTop\\\">\\n      {{ 'preview.contract' | translate}}<br>\\n      {{ 'preview.sla' | translate}}<br>\\n      {{ 'preview.interval' | translate}}<br>\\n      {{ 'preview.year' | translate}}\\n    </td>\\n    <td rowspan=\\\"5\\\" class=\\\"borderRight textTop\\\">\\n      <b>\\n        {{stkService.selectedReport.contract}}<br>\\n        **R+**<br>\\n        {{stkService.selectedReport.device.intervall}}<br>\\n        {{stkService.selectedReport.year}}\\n      </b>\\n    </td>\\n  </tr>\\n  <tr></tr>\\n  <tr></tr>\\n  <tr></tr>\\n  <tr></tr>\\n  <tr>\\n    <td class=\\\"borderLeft\\\">{{ 'preview.account' | translate}} <b>{{stkService.selectedReport.device.department}}</b></td>\\n    <td class=\\\"borderLeft\\\">{{ 'preview.location' | translate}}</td>\\n    <td class=\\\"topBorder\\\"><b>{{stkService.selectedReport.device.location}}</b></td>\\n    <td colspan=\\\"2\\\" class=\\\"textCenter borderLeft borderRight\\\">**SD: &#8864;**</td>\\n  </tr>\\n\\n  <!-- tools muss hier noch rein-->\\n  <tr>\\n    <td colspan=\\\"5\\\"\\n        style=\\\"border: 1px black solid;\\n        padding-top: 3px;\\n        padding-bottom: 3px;\\\">\\n      <span>{{ 'preview.tools' | translate}}</span>\\n      <span *ngFor=\\\"let tool of stkService.selectedReport.tools; let i = index\\\" style=\\\"padding-left: 20px;\\\">\\n        <small>{{1+i}}. </small><b>{{tool}}</b>\\n      </span>\\n    </td>\\n  </tr>\\n\\n\\n  <!-- ServiceKit Row -->\\n  <tr>\\n    <td colspan=\\\"5\\\"\\n        style=\\\"border: 1px black solid;\\n        padding-top: 3px;\\n        padding-bottom: 3px;\\\">\\n      <span>{{ 'preview.serviceKit' | translate}}</span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(1) + 1\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(2) + 2\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(3) + 3\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(4) + 4\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(5) + 5\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(6) + 6\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(7) + 7\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(8) + 8\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(10) + 10\\\"></span>\\n      <span style=\\\"padding-left: 20px;\\\" [innerHTML]=\\\"checkServiceKit(12) + 12\\\"></span>\\n    </td>\\n  </tr>\\n</table>\\n\\n\\n<table class=\\\"workTable\\\">\\n\\n  <tr>\\n    <td style=\\\"border: black 1px dotted;\\\">\\n      {{ 'preview.service' | translate}}\\n    </td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">\\n      {{ 'preview.date' | translate}}\\n    </td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">\\n      {{ 'preview.technician' | translate}}\\n    </td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">\\n      {{ 'preview.workTime' | translate}}\\n    </td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">\\n      {{ 'preview.travelTime' | translate}}\\n    </td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">\\n      {{ 'preview.total' | translate}}\\n    </td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">\\n      {{ 'preview.chargeable' | translate}}\\n    </td>\\n  </tr>\\n  <tr *ngFor=\\\"let work of stkService.selectedReport.work\\\">\\n    <td style=\\\"border: black 1px dotted;\\\">{{work.service}}</td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">{{work.date | date: 'dd.MM.yyyy'}}</td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">{{work.technician}}</td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">{{work.workload}}</td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">{{work.travelTime}}</td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\">{{work.workload + work.travelTime}}</td>\\n    <td style=\\\"border: black 1px dotted;\\\" class=\\\"textCenter\\\" [innerHTML]=\\\"checkChargeable(work.chargeable)\\\"></td>\\n  </tr>\\n</table>\\n\\n<table class=\\\"sparePartTable\\\" *ngIf=\\\"stkService.selectedReport.spareParts\\\">\\n  <tr>\\n    <td colspan=\\\"8\\\"> {{ 'preview.spareParts' | translate}}</td>\\n  </tr>\\n  <tr>\\n    <td class=\\\"sparePartCell\\\">\\n      {{ 'preview.articleNumber' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell\\\">\\n      {{ 'preview.description' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell\\\">\\n      {{ 'preview.snLot' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell\\\">\\n      {{ 'preview.supplier' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell textCenter\\\">\\n      {{ 'preview.amount' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell textCenter\\\">\\n      {{ 'preview.price' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell textCenter\\\">\\n      {{ 'preview.total' | translate}}\\n    </td>\\n    <td class=\\\"sparePartCell textCenter\\\">\\n      {{ 'preview.chargeable' | translate}}\\n    </td>\\n  </tr>\\n  <tr *ngFor=\\\"let sparePart of stkService.selectedReport.spareParts\\\">\\n    <td class=\\\"sparePartCell\\\">{{sparePart.articleNr}}</td>\\n    <td class=\\\"sparePartCell\\\">{{sparePart.description}}</td>\\n    <td class=\\\"sparePartCell\\\">{{sparePart.serial}}</td>\\n    <td class=\\\"sparePartCell\\\">{{sparePart.supplier}}</td>\\n    <td class=\\\"sparePartCell textCenter\\\">{{sparePart.amount}}</td>\\n    <td class=\\\"sparePartCell textCenter\\\">{{sparePart.price}}</td>\\n    <td class=\\\"sparePartCell textCenter\\\">{{sparePart.amount * sparePart.price}}</td>\\n    <td class=\\\"sparePartCell textCenter\\\" [innerHTML]=\\\"checkChargeable(sparePart.chargeable)\\\"></td>\\n  </tr>\\n</table>\\n\\n\\n<div *ngIf=\\\"stkService.selectedReport.comment\\\"\\n     style=\\\"border: 1px black solid;\\n     margin-top: 3px;\\n     width: 18cm;\\n     padding-top: 3px;\\n     padding-bottom: 3px;\\\">\\n  <span>\\n    <b> {{ 'preview.comments' | translate}}</b>\\n  </span>\\n  <br>\\n  <span>{{stkService.selectedReport.comment}}</span>\\n</div>\\n\\n<table class=\\\"footerTable\\\">\\n  <tr>\\n    <td>{{'preview.notFound' | translate}}<span [innerHTML]=\\\"checkState('notFound')\\\"></span></td>\\n    <td>{{'preview.notAvailable' | translate}} <span [innerHTML]=\\\"checkState('notAvailable')\\\"></span></td>\\n    <td>{{'preview.notFinished' | translate}}<span [innerHTML]=\\\"checkState('notFinished')\\\"></span></td>\\n  </tr>\\n  <tr>\\n    <td>{{'preview.repairNeeds' | translate}}<span [innerHTML]=\\\"checkState('repairNeeds')\\\"></span></td>\\n    <td>{{'preview.outOfService' | translate}}<span [innerHTML]=\\\"checkState('outOfService')\\\"></span></td>\\n    <td class=\\\"borderLeft\\\">{{'preview.passed' | translate}}</td>\\n    <td class=\\\"borderRight\\\"><span [innerHTML]=\\\"checkStatedPassed()\\\"></span></td>\\n  </tr>\\n  <tr>\\n    <td class=\\\"footerCell\\\">{{'preview.date' | translate}}: {{today | date: 'dd.MM.yyyy'}}</td>\\n    <td class=\\\"footerCell\\\" colspan=\\\"2\\\">{{'preview.technician' | translate}}: {{user.name}}</td>\\n    <td rowspan=\\\"2\\\" class=\\\"footerCell\\\">{{'preview.signatureClient' | translate}}</td>\\n  </tr>\\n  <tr>\\n    <td class=\\\"footerCell\\\">{{stkService.selectedReport.testProcedure.version}}</td>\\n    <td class=\\\"footerCell\\\">{{'preview.teamLeader' | translate}}</td>\\n    <td class=\\\"footerCell\\\">{{'preview.charged' | translate}}</td>\\n  </tr>\\n</table>\\n\\n<hr>\\n\\n<div class=\\\"checkTableDiv\\\">\\n  <table *ngFor=\\\"let testSection of stkService.selectedReport.testProcedure.testSections; let i = index\\\" class=\\\"checkTable\\\">\\n    <tr *ngIf=\\\"i == 0\\\">\\n\\n      <td class=\\\"checkTableCol2 borderLeft\\\"><small>{{'preview.testParameter' | translate}}</small></td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\"><small>{{'preview.dimension' | translate}}</small></td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\"><small>{{'preview.minimum' | translate}}</small></td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\"><small>{{'preview.maximum' | translate}}</small></td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\"><small>{{'preview.result' | translate}}</small></td>\\n      <td class=\\\"checkTableComment borderLeft borderRight\\\"><small>{{'preview.comment' | translate}}</small></td>\\n\\n    </tr>\\n    <tr class=\\\"greyBack\\\">\\n      <th class=\\\"checkTableCol2 borderLeft \\\">{{testSection.sectionTitle.description_de}}</th>\\n      <th class=\\\"checkTableCol3 borderLeft borderLeft greyBack\\\"></th>\\n      <th class=\\\"checkTableCol3 borderLeft borderLeft\\\"></th>\\n      <th class=\\\"checkTableCol3 borderLeft borderLeft\\\"></th>\\n      <th class=\\\"checkTableCol3 borderLeft borderLeft\\\"></th>\\n      <th class=\\\"checkTableComment borderLeft borderRight\\\"></th>\\n    </tr>\\n    <tr *ngFor=\\\"let testPoint of testSection.testPoints\\\">\\n      <td class=\\\"checkTableCol2 borderLeft\\\">{{testPoint.description_de}}</td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\">{{testPoint.dimension}}</td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\">{{testPoint.minValue}}</td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\">{{testPoint.maxValue}}</td>\\n      <td class=\\\"checkTableCol3 borderLeft textCenter\\\">{{testPoint.result}}</td>\\n      <td class=\\\"checkTableComment borderLeft borderRight\\\">{{testPoint.comment}}</td>\\n    </tr>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {StkService} from \"../../../services/stk.service\";\nimport {User} from \"../../../services/auth.service\";\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.css']\n})\nexport class PreviewComponent implements OnInit {\n\n  public stkService;\n  public today = Date.now();\n  user;\n\n  public checkServiceKit(num: number){\n    if(this.stkService.selectedReport.serviceKit == num){\n      return '&#x25C9; ';\n    }\n    return '&#x25EF; ';\n  }\n\n  public checkChargeable(chargeable: boolean){\n    if(chargeable) return '&#10003;';\n    return null;\n  }\n\n  public checkState(param){\n    if (this.stkService.selectedReport.state == param) return '&#x25C9;';\n    else return '&#x25EF;';\n  }\n\n  public checkStatedPassed() {\n    switch (this.stkService.selectedReport.state) {\n      case 'passed': {\n        return ' Ja &#x25C9; Nein &#x25EF;';\n      }\n      case 'outOfService': {\n        return ' Ja &#x25EF; Nein &#x25C9;';\n      }\n      case 'repairNeeds': {\n        return ' Ja &#x25EF; Nein &#x25C9;';\n      }\n      default: {\n        return ' Ja &#x25EF; Nein &#x25EF;';\n      }\n    }\n  }\n\n  constructor(stkService: StkService) {\n    this.stkService = stkService;\n  }\n\n  ngOnInit() {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n}\n","module.exports = \".numberField{\\n  text-align: right;\\n}\\n\\n.centerAlign {\\n  text-align: center;\\n}\\n\\nmat-form-field{\\n  margin-right: 10px;\\n}\\n\\ntable {\\n  width: 100%;\\n  text-align: left;\\n  border-collapse: collapse;\\n  margin-bottom: 20px;\\n}\\n\\nth, td {\\n  border-bottom: 1px solid black;\\n}\\n\\n.hooverRow:hover {\\n  background-color: #f5f5f5;\\n}\\n\\n.mat-icon-button{\\n  margin-top: 0;\\n  padding-top: 0;\\n  margin-bottom: 0;\\n  padding-bottom: 0;\\n}\\n\\nbutton{\\n  margin-top: 20px;\\n}\\n\\nfieldset{\\n  margin-top: 20px;\\n}\\n\"","module.exports = \"<mat-tab-group [(selectedIndex)]=\\\"activeTab\\\">\\n  <mat-tab label=\\\"{{'stk.add'|translate}}\\\">\\n    <div>\\n      <p *ngIf=\\\"maxNumberOfSpareParts()\\\">\\n        <mat-icon>info</mat-icon>\\n        {{'stk.maxNumberOfSpareParts'|translate}}\\n      </p>\\n      <form (ngSubmit)=\\\"onSubmitAdd()\\\" #sparePartForm=\\\"ngForm\\\" *ngIf=\\\"!maxNumberOfSpareParts()\\\">\\n        <fieldset>\\n          <legend>{{'stk.spareParts'|translate}}</legend>\\n          <mat-form-field>\\n            <input matInput [(ngModel)]=\\\"articleNr\\\" required name=\\\"articleNumber\\\">\\n            <mat-label>{{'stk.articleNumber'|translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput [(ngModel)]=\\\"description\\\" required name=\\\"description\\\">\\n            <mat-label> {{'stk.description'|translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput [(ngModel)]=\\\"serial\\\" required name=\\\"serial\\\">\\n            <mat-label>{{'stk.serial'|translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput [(ngModel)]=\\\"supplier\\\" required name=\\\"supplier\\\">\\n            <mat-label>{{'stk.supplier'|translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput class=\\\"numberField\\\" type=\\\"number\\\" step=\\\"1\\\"\\n                   min=\\\"1\\\" max=\\\"100\\\" [(ngModel)]=\\\"amount\\\" required name=\\\"amount\\\">\\n            <mat-label>{{'stk.amount'|translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput class=\\\"numberField\\\" [(ngModel)]=\\\"price\\\" type=\\\"number\\\" name=\\\"price\\\" min=\\\"0\\\" max=\\\"99999\\\">\\n            <mat-label>{{'stk.price'|translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-checkbox [(ngModel)]=\\\"chargeable\\\" (keyup.enter)=\\\"chargeable = !chargeable\\\" name=\\\"chargeable\\\">\\n            {{'stk.chargeable'|translate}}\\n          </mat-checkbox>\\n        </fieldset>\\n        <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!sparePartForm.form.valid\\\">{{'stk.add'|translate}}</button>\\n      </form>\\n    </div>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"{{'stk.overview'|translate}}\\\">\\n    <br>\\n    <p *ngIf=\\\"noSparePartsAdded()\\\">\\n      <mat-icon>info</mat-icon>\\n      {{'stk.noSpareParts'|translate}}\\n    </p>\\n    <table *ngIf=\\\"!noSparePartsAdded()\\\">\\n      <tr>\\n        <th>{{ 'stk.articleNumber' | translate}}</th>\\n        <th>{{ 'stk.description' | translate}}</th>\\n        <th>{{ 'stk.serial' | translate}}</th>\\n        <th>{{ 'stk.supplier' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.amount' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.price' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.total' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.chargeable' | translate}}</th>\\n        <th></th>\\n      </tr>\\n      <tr *ngFor=\\\"let sparePart of stkService.selectedReport.spareParts; let i = index\\\" class=\\\"hooverRow\\\">\\n        <td>{{sparePart.articleNr}}</td>\\n        <td>{{sparePart.description}}</td>\\n        <td>{{sparePart.serial}}</td>\\n        <td>{{sparePart.supplier}}</td>\\n        <td class=\\\"centerAlign\\\"> {{sparePart.amount}}</td>\\n        <td class=\\\"centerAlign\\\">{{sparePart.price}}</td>\\n        <td class=\\\"centerAlign\\\">\\n          <span *ngIf=\\\"sparePart.price && sparePart.amount\\\">{{sparePart.price * sparePart.amount}}</span>\\n        </td>\\n        <td class=\\\"centerAlign\\\">\\n          <span *ngIf=\\\"sparePart.chargeable\\\">&#10004;</span>\\n        </td>\\n        <td>\\n          <button mat-icon-button (click)=\\\"openDialog(i)\\\" color=\\\"primary\\\">\\n            <mat-icon aria-label=\\\"edit\\\">edit</mat-icon>\\n          </button>\\n          <button mat-icon-button (click)=\\\"removeSparePart(i)\\\" color=\\\"warn\\\">\\n            <mat-icon aria-label=\\\"delete\\\">delete</mat-icon>\\n          </button>\\n        </td>\\n      </tr>\\n    </table>\\n  </mat-tab>\\n</mat-tab-group>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {StkService} from \"../../../services/stk.service\";\nimport {SparePart} from \"../../../models/sparePart\";\nimport {SparepartsEditDialogComponent} from \"./spareparts-edit-dialog/spareparts-edit-dialog.component\";\nimport {MatDialog} from \"@angular/material\";\n\n@Component({\n  selector: 'app-spare-parts',\n  templateUrl: './spare-parts.component.html',\n  styleUrls: ['./spare-parts.component.css']\n})\nexport class SparePartsComponent implements OnInit {\n\n  articleNr: string;\n  description: string;\n  serial: string;\n  supplier: string;\n  amount: number;\n  price: number;\n  chargeable: boolean = false;\n  stkService;\n  activeTab = 0;\n  year = new Date().getFullYear();\n\n  serviceKits = [\n    {viewValue: '', value: '-'},\n    {viewValue: `(${this.year + 1})`, value: '1'},\n    {viewValue: `(${this.year + 2})`, value: '2'},\n    {viewValue: `(${this.year + 3})`, value: '3'},\n    {viewValue: `(${this.year + 4})`, value: '4'},\n    {viewValue: `(${this.year + 5})`, value: '5'},\n    {viewValue: `(${this.year + 6})`, value: '6'},\n    {viewValue: `(${this.year + 7})`, value: '7'},\n    {viewValue: `(${this.year + 8})`, value: '8'},\n    {viewValue: `(${this.year + 10})`, value: '10'},\n    {viewValue: `(${this.year + 12})`, value: '12'}\n  ];\n\n  constructor(stkService: StkService, public dialog: MatDialog) {\n    this.stkService = stkService;\n  }\n\n  onSubmitAdd(){\n    let sparePart = new SparePart(\n      this.articleNr,\n      this.description,\n      this.serial,\n      this.supplier,\n      this.amount,\n      this.price,\n      this.chargeable)\n    this.stkService.selectedReport.addSparePart(sparePart);\n    this.activeTab = 1;\n    this.resetFields();\n  }\n\n  resetFields(){\n    this.articleNr = '';\n    this.description = '';\n    this.serial = '';\n    this.supplier = '';\n    this.amount = 0;\n    this.price = 0;\n    this.chargeable = false;\n  }\n\n  removeSparePart(i){\n    this.stkService.selectedReport.removeSparePart(i);\n    if(i==0) this.activeTab = 0;\n  }\n\n  openDialog(i: number): void {\n    const dialogRef = this.dialog.open(SparepartsEditDialogComponent, {\n      data: {\n        sparePart: this.stkService.selectedReport.spareParts[i],\n        i: i,\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  maxNumberOfSpareParts(){\n    if(!this.stkService.selectedReport.spareParts || this.stkService.selectedReport.spareParts.length < 10) {\n      return false;\n    }\n    else return true;\n  }\n\n  noSparePartsAdded(){\n    if(!this.stkService.selectedReport.spareParts || this.stkService.selectedReport.spareParts.length == 0) {\n      return true;\n    }\n    else return false;\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n\n","module.exports = \".numberField{\\n  text-align: right;\\n}\\n\\nmat-form-field{\\n  margin-right: 10px;\\n}\\n\\n.button-row button,\\n.button-row a {\\n  margin-right: 8px;\\n}\\n\"","module.exports = \"<h2 mat-dialog-title=\\\"\\\">{{ 'stk.edit' | translate}}</h2>\\n\\n<mat-dialog-content>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #sparePartForm=\\\"ngForm\\\">\\n    <mat-form-field>\\n      <input matInput\\n             placeholder=\\\"{{ 'stk.articleNumber' | translate}}\\\" [(ngModel)]=\\\"sparePart.articleNr\\\"\\n             required\\n             name=\\\"articleNumber\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput\\n             placeholder=\\\"{{ 'stk.description' | translate}}\\\" [(ngModel)]=\\\"sparePart.description\\\"\\n             required\\n             name=\\\"description\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"{{ 'stk.serial' | translate}}\\\" [(ngModel)]=\\\"sparePart.serial\\\"\\n             required\\n             name=\\\"serial\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"{{ 'stk.supplier' | translate}}\\\" [(ngModel)]=\\\"sparePart.supplier\\\"\\n             required\\n             name=\\\"supplier\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput class=\\\"numberField\\\" placeholder=\\\"{{ 'stk.amount' | translate}}\\\"\\n             type=\\\"number\\\"\\n             step=\\\"1\\\"\\n             min=\\\"1\\\"\\n             max=\\\"50\\\"\\n             required\\n             name=\\\"amount\\\"\\n             [(ngModel)]=\\\"sparePart.amount\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput class=\\\"numberField\\\"\\n             placeholder=\\\"{{ 'stk.price' | translate}}\\\"\\n             [(ngModel)]=\\\"sparePart.price\\\"\\n             type=\\\"number\\\"\\n             name=\\\"price\\\"\\n             min=\\\"0\\\"\\n             max=\\\"99999\\\"\\n      >\\n    </mat-form-field>\\n\\n    <br>\\n    <mat-checkbox [(ngModel)]=\\\"sparePart.chargeable\\\"\\n                  (keyup.enter)=\\\"sparePart.chargeable = !sparePart.chargeable\\\"\\n                  name=\\\"chargeable\\\">\\n      {{ 'stk.chargeable' | translate}}\\n    </mat-checkbox>\\n    <br>\\n\\n    <div class=\\\"button-row\\\">\\n      <button mat-button mat-dialog-close>{{ 'stk.cancel' | translate}}</button>\\n      <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!sparePartForm.form.valid\\\">{{ 'stk.save' | translate}}</button>\\n    </div>\\n\\n  </form>\\n</mat-dialog-content>\\n\"","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material\";\nimport {StkService} from \"../../../../services/stk.service\";\nimport {SparePart} from \"../../../../models/sparePart\";\n\n@Component({\n  selector: 'app-spareparts-edit-dialog',\n  templateUrl: './spareparts-edit-dialog.component.html',\n  styleUrls: ['./spareparts-edit-dialog.component.css']\n})\nexport class SparepartsEditDialogComponent implements OnInit {\n\n  stkService;\n  public sparePart: SparePart = new SparePart(\n    this.data.sparePart.articleNr,\n    this.data.sparePart.description,\n    this.data.sparePart.serial,\n    this.data.sparePart.supplier,\n    this.data.sparePart.amount,\n    this.data.sparePart.price,\n    this.data.sparePart.chargeable\n  );\n\n  indexOfSparePart: number = this.data.i;\n\n  constructor( stkService: StkService ,\n               public dialogRef: MatDialogRef<SparepartsEditDialogComponent>,\n               @Inject(MAT_DIALOG_DATA)\n               public data: any) {\n    this.stkService = stkService;\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(){\n    this.stkService.selectedReport.spareParts.splice(this.indexOfSparePart,1, this.sparePart);\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \"mat-card {\\n  max-width: 1300px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 30px;\\n}\\n\\n.green{\\n  color: green;\\n  vertical-align: middle;\\n  padding-bottom: 3px;\\n  margin-left: 10px;\\n}\\n\\n.orange{\\n  color: orangered;\\n  vertical-align: middle;\\n  padding-bottom: 3px;\\n  margin-left: 10px;\\n}\\n\\nbutton{\\n  margin-right: 10px;\\n\\n}\\n\\n.deleteButton{\\n  float: right;\\n}\\n\"","module.exports = \"<mat-card>\\n\\n  <mat-card-header *ngIf=\\\"stkService.selectedReport\\\">\\n    <mat-card-title>\\n      <h3>\\n        {{\\\"stk.id\\\"|translate}}:\\n        {{stkService.selectedReport.device.id}}\\n      </h3>\\n    </mat-card-title>\\n    <mat-card-subtitle>\\n      <h3>\\n        {{\\\"stk.model\\\"|translate}}:\\n        {{stkService.selectedReport.device.model}}\\n      </h3>\\n    </mat-card-subtitle>\\n  </mat-card-header>\\n\\n  <mat-card-content *ngIf=\\\"!stkService.selectedReport\\\">\\n    <h2>{{\\\"stk.noProtocolSelected\\\"|translate}}</h2>\\n  </mat-card-content>\\n\\n  <mat-card-content cdk-scrollable=\\\"true\\\" *ngIf=\\\"stkService.selectedReport\\\">\\n    <mat-accordion>\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            <b>{{\\\"stk.information\\\"|translate}}</b>\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-infos></app-infos>\\n      </mat-expansion-panel>\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            <b>{{\\\"stk.tools\\\"|translate}}</b>\\n            &nbsp; ({{stkService.numberOfTools()}})\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-tools></app-tools>\\n      </mat-expansion-panel>\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            <b>{{\\\"stk.spareParts\\\"|translate}}</b>\\n            &nbsp; ({{stkService.numberOfSpareParts()}})\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-spare-parts></app-spare-parts>\\n      </mat-expansion-panel>\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            <b>{{\\\"stk.work\\\"|translate}}</b>\\n            &nbsp; ({{stkService.numberOfWork()}})\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-work></app-work>\\n      </mat-expansion-panel>\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            <b>{{\\\"stk.testProcedure\\\"|translate}}</b>\\n            <mat-icon *ngIf=\\\"stkService.selectedReport.testProcedure.validationCheck() == true\\\" class=\\\"green\\\">check_circle</mat-icon>\\n            <mat-icon *ngIf=\\\"stkService.selectedReport.testProcedure.validationCheck() == false\\\" class=\\\"orange\\\">warning</mat-icon>\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-test-procedure></app-test-procedure>\\n      </mat-expansion-panel>\\n      <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            <b>{{\\\"stk.conclusion\\\"|translate}}</b>\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-conclusion></app-conclusion>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n\\n  </mat-card-content>\\n\\n  <mat-card-actions *ngIf=\\\"stkService.selectedReport\\\">\\n    <button mat-flat-button (click)=\\\"openDialog()\\\">{{\\\"stk.preview\\\"|translate}}</button>\\n    <button mat-flat-button (click)=\\\"saveReport()\\\">\\n      {{\\\"stk.save\\\"|translate}}\\n    </button>\\n    <button mat-flat-button\\n            (click)=\\\"uploadReport()\\\"\\n            [disabled]=\\\"!stkService.selectedReport.isValid()\\\">\\n      {{\\\"stk.send\\\"|translate}}\\n    </button>\\n    <button mat-flat-button class=\\\"deleteButton\\\"\\n            (click)=\\\"removeSelectedReport()\\\" color=\\\"warn\\\">\\n      {{\\\"stk.delete\\\"|translate}}\\n    </button>\\n  </mat-card-actions>\\n\\n</mat-card >\\n\"","import {Component, OnInit} from '@angular/core';\nimport {StkService} from \"../../services/stk.service\";\nimport {PreviewReportDialogComponent} from \"./preview/preview-report-dialog/preview-report-dialog.component\";\nimport {MatDialog} from \"@angular/material\";\nimport {FlashMessagesService} from \"angular2-flash-messages\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {Report} from \"../../models/report\";\n\n@Component({\n  selector: 'app-stk',\n  templateUrl: './stk.component.html',\n  styleUrls: ['./stk.component.css']\n})\nexport class StkComponent implements OnInit {\n\n  stkService;\n  successDe = 'Protokoll wurde erfolgreich hochgeladen';\n  successEn = 'Report has been successfully uploaded';\n  errorDe = 'Fehler beim Hochladen des Protokolls!';\n  errorEn = 'Error while uploading report!';\n\n\n  constructor(stkService: StkService,\n              public dialog: MatDialog,\n              private flashMessage: FlashMessagesService,\n              private translate: TranslateService) {\n    this.stkService = stkService;\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(PreviewReportDialogComponent, {\n      data: {}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  getSuccessMessage() {\n    if (this.translate.currentLang == 'de') return this.successDe;\n    else return this.successEn;\n  }\n\n  getErrorMessage() {\n    if (this.translate.currentLang == 'de') return this.errorDe;\n    else return this.errorEn;\n  }\n\n\n  uploadReport() {\n    this.stkService.uploadReport().subscribe(\n      data => {\n        this.flashMessage.show(this.getSuccessMessage(),\n          {cssClass: 'alert-success', timeout: 3000});\n        this.stkService.removeSelectedReport();\n      },\n      err => {\n        this.flashMessage.show(this.getErrorMessage(),\n          {cssClass: 'alert-danger', timeout: 3000});\n        return false;\n      });\n  }\n\n  removeSelectedReport() {\n    this.stkService.removeSelectedReport();\n  }\n\n  saveReport() {\n    this.stkService.saveToLocalStorage();\n  }\n\n\n\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"mat-form-field{\\n  padding-right: 10px;\\n}\\n\\nmat-divider{\\n  margin-top: 20px;\\n}\\n\\n.testPoint{\\n  margin-bottom: 30px;\\n}\\n\\n.hint{\\n  color: blue;\\n}\\n\\n.green{\\n  color: green;\\n  vertical-align: middle;\\n  padding-bottom: 3px;\\n}\\n\\n.orange{\\n  color: orangered;\\n  vertical-align: middle;\\n  padding-bottom: 3px;\\n}\\n\\n.black{\\n  vertical-align: middle;\\n  padding-bottom: 3px;\\n}\\n\\n.sectionTitle{\\n  margin-right: 10px;\\n}\\n\"","module.exports = \"<mat-vertical-stepper [linear]=\\\"false\\\" #stepper *ngIf=\\\"checkTestProcedure()\\\">\\n  <mat-step *ngFor=\\\"let testSection of testProcedure.testSections; let i = index\\\">\\n    <ng-template matStepLabel>\\n      <b>\\n        <span class=\\\"sectionTitle\\\" *ngIf=\\\"translateService.currentLang == 'de'\\\">{{testSection.sectionTitle.description_de}}</span>\\n        <span class=\\\"sectionTitle\\\"*ngIf=\\\"translateService.currentLang == 'en'\\\">{{testSection.sectionTitle.description_en}}</span>\\n      </b>\\n\\n      <mat-icon *ngIf=\\\"testSection.validationCheck() == true\\\" class=\\\"green\\\">check_circle</mat-icon>\\n      <mat-icon *ngIf=\\\"testSection.validationCheck() == false\\\" class=\\\"orange\\\">warning</mat-icon>\\n      <mat-icon *ngIf=\\\"testSection.validationCheck() == null\\\" class=\\\"black\\\">edit</mat-icon>\\n\\n    </ng-template>\\n\\n      <div *ngFor=\\\"let testPoint of testSection.testPoints\\\" class=\\\"testPoint\\\">\\n        <div>\\n        <span matTooltip=\\\"{{ 'stk.nr' | translate }}: {{testPoint.nr}}\\\">\\n          <b *ngIf=\\\"translateService.currentLang == 'de'\\\">{{testPoint.description_de}}</b>\\n          <b *ngIf=\\\"translateService.currentLang == 'en'\\\">{{testPoint.description_en}}</b>\\n        </span>\\n        </div>\\n        <div *ngIf=\\\"testPoint.maxValue || testPoint.minValue\\\" class=\\\"hint\\\">\\n          (\\n          <span *ngIf=\\\"testPoint.minValue || !testPoint.minValue\\\">{{testPoint.minValue}} &nbsp;</span>\\n          <span *ngIf=\\\"testPoint.maxValue\\\">- {{testPoint.maxValue}} &nbsp;</span>\\n          <span *ngIf=\\\"testPoint.dimension\\\">{{testPoint.dimension}}</span>\\n          )\\n        </div>\\n\\n        <mat-form-field class=\\\"maxWidth\\\">\\n\\n          <!-- Is Showed when setpoint = \\\"i.O\\\" -->\\n          <mat-select *ngIf=\\\"!checkSetPoint(testPoint)\\\" placeholder=\\\"{{ 'stk.result' | translate }}\\\"\\n                      [(value)]=\\\"testPoint.result\\\">\\n            <mat-option value=\\\"i.O.\\\">\\n              <mat-icon matListIcon>thumb_up</mat-icon>\\n            </mat-option>\\n            <mat-option value=\\\"X\\\">\\n              <mat-icon mat-list-icon>thumb_down</mat-icon>\\n            </mat-option>\\n            <mat-option value=\\\"N.V.\\\">\\n              <mat-icon>clear</mat-icon>\\n            </mat-option>\\n          </mat-select>\\n\\n          <input matInput *ngIf=\\\"checkSetPoint(testPoint)\\\" placeholder=\\\"{{ 'stk.result' | translate }}\\\"\\n                 [(ngModel)]=\\\"testPoint.result\\\">\\n\\n          <span matSuffix *ngIf=\\\"checkSetPoint(testPoint)\\\">\\n          {{testPoint.dimension}}\\n        </span>\\n\\n        </mat-form-field>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"{{ 'stk.comment' | translate }}\\\" [(ngModel)]=\\\"testPoint.comment\\\">\\n        </mat-form-field>\\n        <mat-icon *ngIf=\\\"testPoint.checkStatus()\\\" class=\\\"green\\\">check_circle</mat-icon>\\n        <mat-icon *ngIf=\\\"testPoint.checkStatus() == false\\\" class=\\\"orange\\\">warning</mat-icon>\\n        <mat-divider></mat-divider>\\n      </div>\\n      <div *ngIf=\\\"i != testProcedure.testSections.length -1\\\">\\n        <button mat-button matStepperNext>{{ 'stk.next' | translate }}</button>\\n      </div>\\n  </mat-step>\\n</mat-vertical-stepper>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {StkService} from \"../../../services/stk.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {TestSection} from \"../../../models/testSection\";\nimport {TestProcedure} from \"../../../models/testProcedure\";\nimport {TestPoint} from \"../../../models/testPoint\";\n\n@Component({\n  selector: 'app-test-procedure',\n  templateUrl: './test-procedure.component.html',\n  styleUrls: ['./test-procedure.component.css']\n})\n\nexport class TestProcedureComponent implements OnInit {\n\n  stkService;\n  translateService;\n  testProcedure: TestProcedure;\n\n  constructor(stkService: StkService,\n              translateService: TranslateService) {\n    this.stkService = stkService;\n    this.translateService = translateService;\n  }\n\n  checkTestProcedure(){\n    if(this.stkService.selectedReport.testProcedure){\n      this.testProcedure = this.stkService.selectedReport.testProcedure;\n      return true;\n    }\n    return false\n  }\n\n  checkSetPoint(testPoint: TestPoint){\n    if(testPoint.dimension){\n      if(testPoint.dimension == 'i.O.') return false\n    }\n    return true;\n  }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"/*mat-chip {\\n  max-width: 200px;\\n}*/\\n\\nh1{\\n  font-size: 12pt;\\n}\\n\\nmat-form-field{\\n  margin-right: 10px;\\n}\\n\\ntable{\\n  text-align: left;\\n  width: 100%;\\n  max-width: 400px;\\n  border-collapse: collapse;\\n}\\n\\ntr, td, th{\\n  border-bottom: solid 1px black;\\n}\\n\\n.hooverRow:hover {\\n  background-color: #f5f5f5;\\n}\\n\"","module.exports = \"<mat-tab-group>\\n  <mat-tab label=\\\"{{'stk.overview'|translate}}\\\">\\n\\n    <br>\\n    <form (ngSubmit)=\\\"addTool(toolId)\\\" #toolAddForm=\\\"ngForm\\\" *ngIf=\\\"!maxNumberOfTools()\\\">\\n      <mat-form-field>\\n        <input matInput\\n               [(ngModel)]=\\\"toolId\\\"\\n               [disabled]=\\\"!allowAdding()\\\"\\n               name=\\\"toolId\\\"\\n               maxlength=\\\"8\\\"\\n               minlength=\\\"5\\\">\\n        <mat-label>{{'stk.id'|translate}}</mat-label>\\n      </mat-form-field>\\n\\n      <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!toolAddForm.form.valid || isEmpty()\\\">\\n        {{'stk.add'|translate}}\\n      </button>\\n    </form>\\n\\n    <div>\\n      <p *ngIf=\\\"maxNumberOfTools()\\\">\\n        <mat-icon>info</mat-icon>\\n        {{'stk.maxNumberOfTools'|translate}}\\n      </p>\\n      <div *ngIf=\\\"noToolsAdded()\\\">\\n        <mat-icon>info</mat-icon>\\n        {{'stk.noToolsUsed'|translate}}\\n      </div>\\n      <fieldset *ngIf=\\\"!noToolsAdded()\\\">\\n        <legend>{{'stk.usedTools'|translate}}</legend>\\n        <mat-chip-list>\\n          <mat-chip *ngFor=\\\"let tool of stkService.selectedReport.tools; let i = index\\\">\\n            <b>\\n              {{tool}}\\n            </b>\\n            <mat-icon matChipRemove (click)=\\\"removeTool(i)\\\">\\n              cancel\\n            </mat-icon>\\n          </mat-chip>\\n          <br>\\n        </mat-chip-list>\\n      </fieldset>\\n    </div>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"{{'stk.favorites'|translate}}\\\">\\n    <br>\\n    <table>\\n      <tr>\\n        <th>{{'stk.id'|translate}}</th>\\n        <th>{{'stk.description'|translate}}</th>\\n        <th>\\n        </th>\\n      </tr>\\n      <tr *ngFor=\\\"let tool of toolService.tools\\\" class=\\\"hooverRow\\\">\\n        <td>{{tool.id}}</td>\\n        <td>{{tool.description}}</td>\\n        <td>\\n          <button mat-icon-button color=\\\"primary\\\" [disabled]=\\\"checkTool(tool.id)\\\" (click)=\\\"addTool(tool.id)\\\">\\n            <mat-icon aria-label=\\\"add\\\">add_circle</mat-icon>\\n          </button>\\n          <button mat-icon-button color=\\\"warn\\\" [disabled]=\\\"!idAlreadyUsed(tool.id)\\\" (click)=\\\"removeToolById(tool.id)\\\">\\n            <mat-icon aria-label=\\\"remove\\\">remove_circle</mat-icon>\\n          </button>\\n        </td>\\n      </tr>\\n    </table>\\n  </mat-tab>\\n</mat-tab-group>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {ToolService} from \"../../../services/tool.service\";\nimport {StkService} from \"../../../services/stk.service\";\n\n@Component({\n  selector: 'app-tools',\n  templateUrl: './tools.component.html',\n  styleUrls: ['./tools.component.css']\n})\nexport class ToolsComponent implements OnInit {\n\n  toolId: string;\n  stkService;\n  toolService;\n\n  constructor( toolService: ToolService,\n   stkService: StkService) {\n    this.stkService = stkService;\n    this.toolService = toolService;\n  }\n\n  allowAdding() {\n    let tools = this.stkService.selectedReport.tools;\n    if(tools == null) return true;\n    if(tools.length < 5) return true;\n    return false;\n  }\n\n  addTool(toolId: string){\n    if(toolId != null  && toolId !=\"\"){\n      if(!this.idAlreadyUsed(toolId)){\n        this.stkService.selectedReport.addTool(toolId);\n        this.toolId = \"\";\n      }\n      else{\n        // Here should a alert be triggered (Already exist)\n      }\n    }\n  }\n\n  public removeTool(i: number){\n    this.stkService.selectedReport.removeTool(i);\n  }\n\n  public idAlreadyUsed(id: string){\n    let report = this.stkService.selectedReport;\n    let result = false;\n    if(report.tools != null){\n      let tools = report.tools;\n      for(let i=0; i < tools.length; i++) {\n        if (tools[i].localeCompare(id) == 0) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  public checkTool(toolId: string){\n    let tools = this.stkService.selectedReport.tools;\n    if(tools != null){\n      if(tools.length >= 5) return true;\n      if(this.idAlreadyUsed(toolId)) return true;\n    }\n    return false;\n  }\n\n  removeToolById(id: string) {\n    let report = this.stkService.selectedReport;\n    if (report.tools != null) {\n      let tools = report.tools;\n      for (let i = 0; i < tools.length; i++) {\n        if (tools[i].localeCompare(id) == 0) {\n          this.removeTool(i);\n          break;\n        }\n      }\n    }\n  }\n\n  isEmpty(){\n    if(!this.toolId || this.toolId == \"\") return true;\n    return false;\n  }\n\n  maxNumberOfTools(){\n    let result = false;\n    if(this.stkService.selectedReport.tools)\n      if(this.stkService.selectedReport.tools.length > 4) result = true;\n    return result;\n  }\n\n  noToolsAdded(){\n    let result = false;\n    if(!this.stkService.selectedReport.tools || this.stkService.selectedReport.tools.length == 0) result = true;\n    return result;\n  }\n\n  ngOnInit() {\n    if (!this.toolService.tools) this.toolService.getTools();\n  }\n\n}\n","module.exports = \".numberField{\\n  text-align: right;\\n}\\n\\nmat-form-field{\\n  margin-right: 10px;\\n}\\n\\n.button-row button,\\n.button-row a {\\n  margin-right: 8px;\\n}\\n\\n\"","module.exports = \"<h2 mat-dialog-title=\\\"\\\">{{ 'stk.edit' | translate}}</h2>\\n\\n<mat-dialog-content>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #workForm=\\\"ngForm\\\">\\n    <mat-form-field>\\n      <mat-select placeholder=\\\"{{ 'stk.service' | translate}}\\\"\\n                  [(ngModel)]=\\\"work.service\\\"\\n                  required\\n                  name=\\\"service\\\">\\n        <mat-option value=\\\"STK\\\">STK</mat-option>\\n        <mat-option value=\\\"REP\\\">REP</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput [matDatepicker]=\\\"dp3\\\"\\n             placeholder=\\\"{{ 'stk.date' | translate}}\\\"\\n             disabled [(ngModel)]=\\\"work.date\\\"\\n             required\\n             name=\\\"date\\\"\\n             [matDatepickerFilter]=\\\"dateFilter\\\">\\n      <mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\n      <mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput\\n             placeholder=\\\"{{ 'stk.technician' | translate}}\\\"\\n             [(ngModel)]=\\\"work.technician\\\"\\n             required\\n             name=\\\"technician\\\"\\n             minlength=\\\"4\\\"\\n             maxlength=\\\"4\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput class=\\\"numberField\\\"\\n             placeholder=\\\"{{ 'stk.workload' | translate}}\\\"\\n             type=\\\"number\\\"\\n             step=\\\"0.25\\\"\\n             min=\\\"0\\\"\\n             max=\\\"10\\\"\\n             [(ngModel)]=\\\"work.workload\\\"\\n             required\\n             name=\\\"workload\\\">\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input matInput class=\\\"numberField\\\"\\n             placeholder=\\\"{{ 'stk.travelTime' | translate}}\\\"\\n             type=\\\"number\\\"\\n             step=\\\"0.25\\\"\\n             min=\\\"0\\\"\\n             max=\\\"10\\\"\\n             [(ngModel)]=\\\"work.travelTime\\\"\\n             required\\n             name=\\\"travelTime\\\">\\n    </mat-form-field>\\n\\n    <br>\\n    <mat-checkbox [(ngModel)]=\\\"work.chargeable\\\"\\n                  (keyup.enter)=\\\"work.chargeable = !work.chargeable\\\"\\n                  name=\\\"chargeable\\\">\\n      {{ 'stk.chargeable' | translate}}\\n    </mat-checkbox>\\n    <br>\\n    <div class=\\\"button-row\\\">\\n      <button mat-button mat-dialog-close>{{ 'stk.cancel' | translate}}</button>\\n      <button mat-flat-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"!workForm.form.valid\\\">\\n        {{ 'stk.save' | translate}}\\n      </button>\\n    </div>\\n\\n  </form>\\n\\n</mat-dialog-content>\\n\"","import {Component, Inject, OnInit} from '@angular/core';\nimport {StkService} from \"../../../../services/stk.service\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material\";\nimport {Work} from \"../../../../models/work\";\n\n@Component({\n  selector: 'app-work-edit-dialog',\n  templateUrl: './work-edit-dialog.component.html',\n  styleUrls: ['./work-edit-dialog.component.css']\n})\nexport class WorkEditDialogComponent implements OnInit {\n\n  stkService;\n  public work: Work = new Work(\n    this.data.work.service,\n    this.data.work.date,\n    this.data.work.technician,\n    this.data.work.workload,\n    this.data.work.travelTime,\n    this.data.work.chargeable\n  );\n  indexOfWork: number = this.data.i;\n\n  dateFilter = (d : Date): boolean => {\n    let date = new Date();\n    return date > d;\n  }\n\n  constructor(stkService: StkService, public dialogRef: MatDialogRef<WorkEditDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: any) {\n    this.stkService = stkService;\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(){\n    this.work.technician = this.work.technician.toUpperCase();\n    this.stkService.selectedReport.work.splice(this.indexOfWork,1, this.work);\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \".numberField{\\n  text-align: right;\\n}\\n\\n.centerAlign{\\n  text-align: center;\\n}\\n\\nmat-form-field{\\n  margin-right: 10px;\\n}\\n\\ntable {\\n  width: 100%;\\n  text-align: left;\\n  border-collapse: collapse;\\n}\\n\\nth, td {\\n  border-bottom: 1px solid black;\\n}\\n\\n.hooverRow:hover {\\n  background-color: #f5f5f5;\\n}\\n\\n.mat-icon-button{\\n  margin-top: 0;\\n  padding-top: 0;\\n  margin-bottom: 0;\\n  padding-bottom: 0;\\n}\\n\\nbutton{\\n  margin-top: 20px;\\n}\\n\\nfieldset{\\n  margin-top: 20px;\\n}\\n\"","module.exports = \"<mat-tab-group [(selectedIndex)]=\\\"activeTab\\\">\\n  <mat-tab label=\\\"{{ 'stk.add' | translate}}\\\">\\n    <div>\\n\\n      <p *ngIf=\\\"maxNumberOfWork()\\\">\\n        <mat-icon>info</mat-icon>\\n        {{'stk.maxNumberOfWork'|translate}}\\n      </p>\\n\\n      <form (ngSubmit)=\\\"onSubmitAdd()\\\" #workForm=\\\"ngForm\\\" *ngIf=\\\"!maxNumberOfWork()\\\">\\n        <fieldset>\\n          <legend>{{ 'stk.work' | translate}}</legend>\\n\\n          <mat-form-field>\\n            <mat-select [(ngModel)]=\\\"service\\\" name=\\\"service\\\" required>\\n              <mat-option value=\\\"STK\\\">STK</mat-option>\\n              <mat-option value=\\\"REP\\\">REP</mat-option>\\n            </mat-select>\\n            <mat-label>{{ 'stk.service' | translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput\\n                   [matDatepicker]=\\\"dp3\\\"\\n                   disabled\\n                   [(ngModel)]=\\\"date\\\"\\n                   name=\\\"date\\\"\\n                   required\\n                   [matDatepickerFilter]=\\\"dateFilter\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\n            <mat-label> {{ 'stk.date' | translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput [(ngModel)]=\\\"technician\\\"\\n                   name=\\\"technician\\\"\\n                   required\\n                   minlength=\\\"4\\\"\\n                   maxlength=\\\"4\\\">\\n            <mat-label>{{ 'stk.technician' | translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input class=\\\"numberField\\\"\\n                   matInput\\n                   type=\\\"number\\\"\\n                   step=\\\"0.25\\\"\\n                   min=\\\"0\\\"\\n                   max=\\\"10\\\"\\n                   [(ngModel)]=\\\"workload\\\"\\n                   name=\\\"workload\\\"\\n                   required>\\n            <mat-label>{{ 'stk.workload' | translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input matInput class=\\\"numberField\\\"\\n                   type=\\\"number\\\"\\n                   step=\\\"0.25\\\"\\n                   min=\\\"0\\\"\\n                   max=\\\"10\\\"\\n                   [(ngModel)]=\\\"travelTime\\\"\\n                   name=\\\"travelTime\\\"\\n                   required>\\n            <mat-label>{{ 'stk.travelTime' | translate}}</mat-label>\\n          </mat-form-field>\\n\\n          <mat-checkbox [(ngModel)]=\\\"chargeable\\\" (keyup.spacebar)=\\\"chargeable = !chargeable\\\" name=\\\"chargeable\\\">\\n            {{ 'stk.chargeable' | translate}}\\n          </mat-checkbox>\\n        </fieldset>\\n        <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!workForm.form.valid\\\">{{ 'stk.add' | translate}}</button>\\n      </form>\\n    </div>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"{{ 'stk.overview' | translate}}\\\">\\n    <br>\\n\\n    <p *ngIf=\\\"noWorkAdded()\\\">\\n      <mat-icon>info</mat-icon>\\n      {{'stk.noWork'|translate}}\\n    </p>\\n\\n    <table *ngIf=\\\"!noWorkAdded()\\\">\\n      <tr>\\n        <th>{{ 'stk.service' | translate}}</th>\\n        <th>{{ 'stk.date' | translate}}</th>\\n        <th>{{ 'stk.technician' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.workload' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.travelTime' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.total' | translate}}</th>\\n        <th class=\\\"centerAlign\\\">{{ 'stk.chargeable' | translate}}</th>\\n        <th></th>\\n      </tr>\\n      <tr *ngFor=\\\"let work of stkService.selectedReport.work; let i = index\\\" class=\\\"hooverRow\\\">\\n        <td>{{work.service}}</td>\\n        <td>{{work.date | date: 'dd.MM.yyyy'}}</td>\\n        <td>{{work.technician}}</td>\\n        <td class=\\\"centerAlign\\\">{{work.workload}}</td>\\n        <td class=\\\"centerAlign\\\">{{work.travelTime}}</td>\\n        <td class=\\\"centerAlign\\\">{{work.workload + work.travelTime}}</td>\\n        <td class=\\\"centerAlign\\\">\\n          <span *ngIf=\\\"work.chargeable\\\">&#10004;</span>\\n        </td>\\n        <td>\\n          <button mat-icon-button color=\\\"primary\\\" (click)=\\\"openDialog(i)\\\">\\n            <mat-icon aria-label=\\\"edit\\\">edit</mat-icon>\\n          </button>\\n          <button mat-icon-button color=\\\"warn\\\" (click)=\\\"removeWork(i)\\\">\\n            <mat-icon aria-label=\\\"delete\\\">delete</mat-icon>\\n          </button>\\n        </td>\\n      </tr>\\n    </table>\\n  </mat-tab>\\n\\n</mat-tab-group>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {User} from \"../../../services/auth.service\";\nimport {Work} from \"../../../models/work\";\nimport {StkService} from \"../../../services/stk.service\";\nimport {MatDialog} from \"@angular/material\";\nimport {WorkEditDialogComponent} from \"./work-edit-dialog/work-edit-dialog.component\";\n\n\n@Component({\n  selector: 'app-work',\n  templateUrl: './work.component.html',\n  styleUrls: ['./work.component.css']\n})\nexport class WorkComponent implements OnInit {\n\n  user: User = JSON.parse(localStorage.getItem('user'));\n  activeTab: number = 0;\n  service: string = \"STK\";\n  date = new Date();\n  technician: string = this.user.username.toUpperCase();\n  workload: number = 0;\n  travelTime: number = 0;\n  chargeable: boolean = false;\n  stkService;\n\n  dateFilter = (d : Date): boolean => {\n    let date = new Date();\n    return date > d;\n  }\n\n  constructor(stkService: StkService,\n              public dialog: MatDialog) {\n    this.stkService = stkService;\n  }\n\n  onSubmitAdd(){\n    let work = new Work(this.service,this.date, this.technician.toLocaleUpperCase(), this.workload, this.travelTime, this.chargeable);\n    this.stkService.selectedReport.addWork(work);\n    this.activeTab = 1;\n    this.resetFields();\n  }\n\n  resetFields(){\n    this.service = \"STK\";\n    this.date = new Date();\n    this.technician = this.user.username.toUpperCase();\n    this.workload = 0;\n    this.travelTime = 0;\n    this.chargeable = false;\n  }\n\n  removeWork(i){\n    this.stkService.selectedReport.removeWork(i);\n  }\n\n  openDialog(i: number): void {\n    const dialogRef = this.dialog.open(WorkEditDialogComponent, {\n      data: {\n        work: this.stkService.selectedReport.work[i],\n        i: i,\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  maxNumberOfWork(){\n    if(!this.stkService.selectedReport.work || this.stkService.selectedReport.work.length < 5) {\n      return false;\n    }\n    else return true;\n  }\n\n  noWorkAdded(){\n    if(!this.stkService.selectedReport.work || this.stkService.selectedReport.work.length == 0) {\n      return true;\n    }\n    else return false;\n  }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"mat-card {\\n  max-width: 1300px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 30px;\\n}\\n\\ntable{\\n  width: 100%;\\n  text-align: left;\\n  border-collapse: collapse;\\n}\\n\\ntr{\\n  border-bottom: 1px solid black;\\n}\\n\\ntr:not(:first-child):hover {\\n  background: #e0e0e0;\\n}\\n\"","module.exports = \"<mat-card>\\n  <mat-card-title>{{\\\"unfinishedReports.unfinishedReports\\\"|translate}}</mat-card-title>\\n  <mat-card-content>\\n    <div *ngIf=\\\"reports\\\">\\n      <table>\\n        <tr>\\n          <th>{{\\\"unfinishedReports.deviceId\\\"|translate}}</th>\\n          <th>{{\\\"unfinishedReports.model\\\"|translate}}</th>\\n          <th>{{\\\"unfinishedReports.client\\\"|translate}}</th>\\n          <th>{{\\\"unfinishedReports.technician\\\"|translate}}</th>\\n          <th>{{\\\"unfinishedReports.date\\\"|translate}}</th>\\n          <th>{{\\\"unfinishedReports.load\\\"|translate}}</th>\\n\\n        </tr>\\n        <tr *ngFor=\\\"let report of unfinishedReports\\\">\\n          <td>{{report.deviceId}}</td>\\n          <td>{{report.deviceModel}}</td>\\n          <td>{{report.clientName}}</td>\\n          <td>{{report.technician}}</td>\\n          <td>{{getDate(report.date)}}</td>\\n          <td>\\n            <button mat-icon-button\\n                    color=\\\"primary\\\"\\n                    (click)=\\\"loadReport(report._id)\\\"\\n                    [disabled]=\\\"alreadyLoaded(report)\\\">\\n              <mat-icon *ngIf=\\\"!alreadyLoaded(report)\\\">\\n                cloud_download\\n              </mat-icon>\\n              <mat-icon *ngIf=\\\"alreadyLoaded(report)\\\">\\n                check_circle\\n              </mat-icon>\\n            </button>\\n          </td>\\n        </tr>\\n      </table>\\n    </div>\\n  </mat-card-content>\\n  <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"waiting\\\"></mat-progress-bar>\\n</mat-card>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {SearchPageService} from \"../../services/search-page.service\";\nimport {Report} from \"../../models/report\";\nimport {StkService} from \"../../services/stk.service\";\n\nexport interface ReportInfo {\n  _id: string,\n  deviceId: string,\n  deviceModel: string,\n  clientName: string,\n  technician: string,\n  date: string\n}\n\n\n@Component({\n  selector: 'app-unfinished-reports',\n  templateUrl: './unfinished-reports.component.html',\n  styleUrls: ['./unfinished-reports.component.css']\n})\nexport class UnfinishedReportsComponent implements OnInit {\n\n  searchPageService;\n  unfinishedReports = new Array<ReportInfo>();\n  reports = new Array<Report>();\n  waiting: boolean = false;\n\n  constructor(searchPageService: SearchPageService,\n              private stkService: StkService) {\n    this.searchPageService = searchPageService;\n  }\n\n  getDate(date: string) {\n    let day = date.substring(6);\n    let month = date.substring(4, 6);\n    let year = date.substring(0, 4);\n    return day + '.' + month + '.' + year;\n  }\n\n  loadReport(id: string) {\n    this.waiting = true;\n    this.stkService.loadUnfinishedReport(id).subscribe(\n      (data) => {\n        if(data){\n          console.log(data);\n          if (!this.stkService.openDrawer) this.stkService.openDrawer = true;\n          let repo = new Report();\n          repo.createFromJson(data);\n          this.stkService.reports.push(repo);\n          this.stkService.saveToLocalStorage();\n          this.waiting = false;\n        }\n      }\n    );\n  }\n\n  alreadyLoaded(report) {\n    let result = false;\n    for (let i of this.stkService.reports) {\n      if (i._id){\n        if(i._id == report._id) result = true;\n      }\n    }\n    return result;\n  }\n\n  ngOnInit() {\n    this.waiting = true;\n    this.searchPageService.getUninishedReports().subscribe(\n      data => {\n        if (data) {\n          for (let report of data) {\n            let repo: ReportInfo = {\n              _id: report._id,\n              deviceId: report.device.id,\n              deviceModel: report.device.model,\n              clientName: report.client.name,\n              technician: report.technician,\n              date: report.date\n            };\n\n            this.unfinishedReports.push(repo);\n          }\n          this.waiting = false;\n        } else {\n          console.log(\"Couldn't load devices from server\");\n          this.waiting = false;\n        }\n      });\n  }\n\n}\n","import {Injectable} from \"@angular/core\";\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from \"@angular/router\";\nimport {AuthService} from \"../services/auth.service\";\nimport {Observable} from \"rxjs\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate{\n\n  constructor(private authService: AuthService,\n              private router: Router) {}\n\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if(this.authService.loggedIn()){\n      return true;\n    }\n    else{\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n\n","import {Client} from \"../services/client.service\";\nimport {Device} from \"../services/device.service\";\nimport {Work} from \"./work\";\nimport {SparePart} from \"./sparePart\";\nimport {TestProcedure} from \"./testProcedure\";\nimport {TestSection} from \"./testSection\";\n\nexport class Report {\n\n  public tools: string[];\n  public client: Client;\n  public device: Device;\n  public work: Work[] = new Array<Work>();\n  public spareParts: SparePart[] = new Array<SparePart>();\n  public corrections = {\n    id: \"\",\n    serial: \"\",\n    model: \"\",\n    year: \"\",\n    location: \"\",\n    department: \"\"\n  };\n  public serviceKit: string;\n  public comment: string;\n  public state: string;\n  public testProcedure: TestProcedure;\n  public technician: string;\n  public date: string;\n  public _id: string;\n\n\n  constructor(){}\n\n  public addTool(tool: string){\n    if(!this.tools) this.tools = new Array<string>();\n    if(this.tools.length < 5) this.tools.push(tool);\n  }\n\n  public removeTool(index: number) {\n    this.tools.splice(index, 1);\n  }\n\n  public addTechnician(){\n    let user = JSON.parse(localStorage.getItem('user'));\n    this.technician = user.name;\n  }\n\n  public addWork(work: Work){\n    this.work.push(work);\n  }\n\n  public removeWork(index: number){\n    this.work.splice(index, 1);\n  }\n\n  public addSparePart(sparePart: SparePart){\n    if(!this.spareParts) this.spareParts = new Array<SparePart>();\n    this.spareParts.push(sparePart);\n  }\n\n  public removeSparePart(index: number){\n    this.spareParts.splice(index, 1);\n  }\n\n  addTestProcedure(testProcedure){\n    this.testProcedure = new TestProcedure();\n    this.testProcedure.model = testProcedure.model;\n    this.testProcedure.version = testProcedure.version;\n    for(let section of testProcedure.testSections){\n      this.testProcedure.testSections.push(new TestSection(section));\n    }\n  }\n\n  isValid(){\n    if(!this.state) return false;\n    if(this.work.length)\n    return true;\n  }\n\n  createFromJson(json){\n    if(json._id) this._id = json._id;\n    if(json.tools) this.tools = json.tools;\n    if(json.client) this.client = json.client;\n    if(json.device) this.device = json.device;\n    if(json.technician) this.technician = json.technician;\n    if(json.state) this.state = json.state;\n    if(json.date) this.date = json.date;\n    if(json.serviceKit) this.serviceKit = json.serviceKit;\n    if(json.comment) this.comment = json.comment;\n    this.corrections = json.corrections;\n    this.addTestProcedure(json.testProcedure);\n    for(let work of json.work) this.addWork(work);\n    for(let sparePart of json.spareParts) this.addSparePart(sparePart);\n  }\n\n}\n","export class SparePart {\n\n  constructor(public articleNr: string,\n              public description: string,\n              public serial: string,\n              public supplier: string,\n              public amount: number,\n              public price: number,\n              public chargeable: boolean\n  ){}\n}\n","export class TestPoint {\n\n  public nr: string;\n  public description_de: string;\n  public description_en: string;\n  public dimension?: string;\n  public minValue?: any;\n  public maxValue?: any;\n  public result: any;\n  public comment: string;\n\n  public checkStatus(): boolean{\n    if(this.result == null || !this.result) return null;\n    if(this.dimension == 'i.O.'){\n      return this.result == 'i.O.' || this.result == 'N.V.';\n    }\n    return this.result >= this.minValue && this.result <= this.maxValue;\n  }\n\n  constructor(testPoint) {\n  this.nr = testPoint.nr;\n  this.dimension = testPoint.dimension;\n  this.description_en = testPoint.description_en;\n  this.description_de = testPoint.description_de;\n  this.minValue = testPoint.minValue;\n  this.maxValue = testPoint.maxValue;\n  if(testPoint.result) this.result = testPoint.result;\n  if(testPoint.comment) this.comment = testPoint.comment;\n  }\n}\n","import {TestSection} from \"./testSection\";\n\nexport class TestProcedure {\n\n  public model: string;\n  public version: string;\n  public testSections: Array<TestSection> = new Array<TestSection>();\n\n\n  constructor() {\n  }\n\n  validationCheck() {\n    let result = true;\n    for (let section of this.testSections) {\n      if(section.validationCheck() == false) return false;\n      if(section.validationCheck() == null) result = null;\n    }\n    return result;\n  }\n\n}\n","import {TestPoint} from \"./testPoint\";\n\nexport class TestSection {\n\n  public sectionTitle: TestPoint;\n  public testPoints: TestPoint[] = new Array<TestPoint>();\n\n  public validationCheck() {\n    let result = true;\n    for(let testPoint of this.testPoints){\n      if(testPoint.checkStatus() == false){\n        return false\n      }\n      if(testPoint.checkStatus() == null){\n        result = null;\n      }\n    }\n    return result;\n  }\n\n  constructor(testSection) {\n    this.sectionTitle = new TestPoint(testSection.sectionTitle);\n    for(let testPoint of testSection.testPoints){\n      this.testPoints.push(new TestPoint(testPoint));\n    }\n  }\n}\n","export class Work {\n\n  constructor(public service: string,\n              public date: Date,\n              public technician: string,\n              public workload: number,\n              public travelTime: number,\n              public chargeable: boolean\n              ){}\n}\n","import {Injectable} from '@angular/core';\nimport {HttpHeaders, HttpClient} from \"@angular/common/http\";\nimport {tokenNotExpired} from \"angular2-jwt\";\nimport {StkService} from \"./stk.service\";\nimport {Report} from \"../models/report\";\n\n\nexport interface User {\n  username: String;\n  id: String;\n  email: String;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  authToken: any;\n  user: any;\n\n\n  constructor(private httpClient: HttpClient,\n              private stkService: StkService) {\n  }\n\n  registerUser(user){\n    let headers = new HttpHeaders();\n    headers.append('Content-Type', 'application/json');\n    return this.httpClient.post<any>('http://localhost:3000/users/register', user, {headers: headers});\n  }\n\n  authenticateUser(user){\n    let headers = new HttpHeaders();\n    headers.append('Content-Type', 'application/json');\n    return this.httpClient.post<any>('http://localhost:3000/users/authenticate', user, {headers: headers});\n  }\n\n  getProfile(){\n    this.loadToken();\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': this.authToken\n    });\n    return this.httpClient.get<any>('http://localhost:3000/users/profile', {headers: headers});\n  }\n\n  storeUserData(token, user){\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.authToken = token;\n    this.user = user;\n  }\n\n  loadToken(){\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  logout(){\n    this.authToken = null;\n    this.user = null;\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('user');\n    this.stkService.reports = new Array<Report>();\n  }\n\n  loggedIn(): boolean{\n    this.loadToken();\n    return tokenNotExpired(null, this.authToken);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpHeaders, HttpClient} from \"@angular/common/http\";\nimport {MatTableDataSource} from \"@angular/material\";\n\nexport interface Client {\n  id: string;\n  nr: number;\n  name: string;\n  street: string;\n  houseNr: string;\n  zip: number;\n  city: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n\n  //client: any;\n  clients: Array<Client> = new Array<Client>();\n  public dataSource = new MatTableDataSource<Client>();\n\n  constructor(private httpClient: HttpClient) {}\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  getClients() {\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    //return this.httpClient.get<any>('http://localhost:3000/clients/all', {headers: headers});\n    return this.httpClient.get<any>('http://localhost:3000/clients/all', {headers: headers});\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpHeaders, HttpClient} from \"@angular/common/http\";\nimport {MatTableDataSource} from \"@angular/material\";\nimport {SearchPageService} from \"./search-page.service\";\n\nexport interface Device {\n  _id: string;\n  id: string,\n  model: string;\n  serial: string;\n  description_umds: string;\n  description: string;\n  brand: string;\n  year: string;\n  account: string;\n  department: number;\n  location: string;\n  clientId: string;\n  state: string;\n  nextCheck: string;\n  lastCheck: string;\n  contract: string;\n  contractNr: string;\n  interval: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n\n  //device: any;\n  //devices: Array<Device> = new Array<Device>();\n  //public dataSource;\n\n  constructor(private httpClient: HttpClient) {}\n\n  /*\n  getDevices(clientId){\n    console.log(\"DeviceService: \" +clientId);\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    this.httpClient.get<Array<Device>>('http://localhost:3000/devices/client/'+clientId, {headers: headers}).subscribe(\n      data => {\n        if(data){\n          this.devices = data;\n          this.dataSource = new MatTableDataSource(this.devices);\n        }\n        else {\n          console.log(\"Couldn't load devices from server\");\n        }\n      });\n  }\n  */\n\n  getDevices(clientId) {\n    console.log(\"DeviceService: \" + clientId);\n    //this.devices = new Array<Device>();\n    //this.dataSource = new MatTableDataSource<Device>();\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.get<Array<Device>>('http://localhost:3000/devices/client/' + clientId, {headers: headers});\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {MatTableDataSource} from \"@angular/material\";\nimport {Client} from \"./client.service\";\nimport {Device} from \"./device.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverviewService {\n\n  clients: Array<Client>;\n\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getClients() {\n    if (!this.clients) {\n      const token = localStorage.getItem(\"id_token\");\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      });\n      return this.httpClient.get<any>('http://localhost:3000/clients/all', {headers: headers});\n    }\n  }\n\n  getDevices(clientId: string) {\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.get<Array<Device>>('http://localhost:3000/devices/client/' + clientId, {headers: headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Client} from \"./client.service\";\nimport {Device, DeviceService} from \"./device.service\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {TestProcedure} from \"../models/testProcedure\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchPageService {\n\n  devices: Array<Device> = new Array<Device>();\n  selectedDevice: Device;\n  selectedClient: Client;\n  activeTab: number = 0;\n  testProcedure: TestProcedure;\n\n  constructor(private deviceService: DeviceService,\n              private httpClient: HttpClient) {}\n\n  selectClient(client: Client) {\n    this.selectedClient = client;\n    this.activeTab = 1;\n    return this.deviceService.getDevices(client.id);\n  }\n\n  resetDevice(){\n    this.selectedDevice = null;\n  }\n\n  selectDevice(device: Device){\n    this.selectedDevice = device;\n    this.activeTab = 2;\n  }\n\n  getTestProcedure(model) {\n    console.log(\"GetTestProcedure: \" + model);\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.get<TestProcedure>('http://localhost:3000/testprocedures/model/' + model, {headers: headers});\n  }\n\n  getUninishedReports() {\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.get<any>('http://localhost:3000/reports/unfinished', {headers: headers});\n  }\n\n  getReports() {\n    console.log(\"GetNotFinishedReports: \");\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.get<any>('http://localhost:3000/reports/all', {headers: headers});\n  }\n\n}\n\n\n\n","import {Injectable} from '@angular/core';\nimport {Report} from \"../models/report\";\nimport {ClientService} from \"./client.service\";\nimport {DeviceService} from \"./device.service\";\nimport {SearchPageService} from \"./search-page.service\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StkService {\n\n  openDrawer: boolean = false;\n  reports = Array<Report>();\n  selectedReport: Report;\n\n  constructor(private clientService: ClientService,\n              private deviceService: DeviceService,\n              private searchService: SearchPageService,\n              private httpClient: HttpClient) {\n  }\n\n  selectReport(report: Report) {\n    this.selectedReport = report;\n  }\n\n  createReport() {\n    let user = JSON.parse(localStorage.getItem('user'));\n    let repo = new Report();\n    repo.device = this.searchService.selectedDevice;\n    repo.client = this.searchService.selectedClient;\n    repo.technician = user.name;\n    //repo.testProcedure = new TestProcedure();\n    this.searchService.getTestProcedure(this.searchService.selectedDevice.model).subscribe(\n      data => {\n        if (data) {\n          repo.addTestProcedure(data);\n          this.saveToLocalStorage();\n        } else {\n          console.log(\"Couldn't load devices from server\");\n        }\n      });\n    this.reports.push(repo);\n    if (!this.openDrawer) this.openDrawer = true;\n  }\n\n  removeSelectedReport() {\n    for (let i = 0; i < this.reports.length; i++) {\n      if (this.reports[i] === this.selectedReport) {\n        this.reports.splice(i, 1);\n        this.selectedReport = null;\n      }\n    }\n    this.saveToLocalStorage();\n  }\n\n  uploadReport() {\n    let user = JSON.parse(localStorage.getItem('user'));\n    let date: string = this.getDate();\n    this.selectedReport.date = date;\n    this.selectedReport.technician = user.name;\n    console.log(JSON.stringify(this.selectedReport));\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.post<any>('http://localhost:3000/reports/', this.selectedReport, {headers: headers})\n  };\n\n  numberOfTools() {\n    if (!this.selectedReport.tools) return 0;\n    else return this.selectedReport.tools.length;\n  }\n\n  numberOfSpareParts() {\n    if (!this.selectedReport.spareParts) return 0;\n    else return this.selectedReport.spareParts.length;\n  }\n\n  numberOfWork() {\n    if (!this.selectedReport.work) return 0;\n    else return this.selectedReport.work.length;\n  }\n\n  loadUnfinishedReport(id: string) {\n    const token = localStorage.getItem(\"id_token\");\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.httpClient.get<any>('http://localhost:3000/reports/id/' + id, {headers: headers});\n  };\n\n  getDate() {\n    let today = new Date();\n    let day: string = today.getDate().toString();\n    let month: string = (today.getMonth() + 1).toString();\n    let year: string = today.getFullYear().toString();\n    if (today.getDate() < 10) {\n      day = \"0\" + day;\n    }\n    if (today.getMonth() + 1 < 10) {\n      month = \"0\" + month;\n    }\n    return year + month + day;\n  }\n\n  saveToLocalStorage() {\n    let user = JSON.parse(localStorage.getItem('user'));\n    let stringi = JSON.stringify(this.reports);\n    localStorage.setItem('reports_' + user.username, stringi);\n    this.updateLocalReports();\n  }\n\n  updateLocalReports() {\n    if (localStorage.getItem('user')) {\n      let user = JSON.parse(localStorage.getItem('user'));\n      if (localStorage.getItem('reports_' + user.username)) {\n        let reportsArrayJson = JSON.parse(localStorage.getItem('reports_' + user.username));\n        let reportsArray: Array<Report> = new Array<Report>();\n        for (let reportJson of reportsArrayJson) {\n          let repo = new Report();\n          repo.createFromJson(reportJson);\n          console.log(reportJson);\n          reportsArray.push(repo);\n        }\n        this.reports = reportsArray;\n      }\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpHeaders, HttpClient} from \"@angular/common/http\";\nimport {User} from \"./auth.service\";\n\n\nexport interface Tool {\n  _id?: String;\n  userName: String;\n  id: string;\n  description: String;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ToolService {\n  authToken: any;\n  user: User;\n  tools: Array<Tool>;\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getTools() {\n    this.loadUser();\n    this.loadToken();\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': this.authToken\n    });\n\n    //debugging\n    console.log('http://localhost:3000/tools/' + this.user.username);\n\n    this.httpClient.get<any>('http://localhost:3000/tools/' + this.user.username, {headers: headers}).subscribe(\n      tools => {\n        this.tools = tools;\n      },\n      err => {\n        console.log(err);\n      });\n  }\n\n  addTool(tool: Tool){\n    this.loadToken();\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': this.authToken\n    });\n    return this.httpClient.post<any>('http://localhost:3000/tools/add', tool, {headers: headers});\n  }\n\n  deleteTool(tool: Tool){\n    this.loadToken();\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': this.authToken\n    });\n    return this.httpClient.delete('http://localhost:3000/tools/'+tool._id, {headers: headers});\n  }\n\n  loadToken() {\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  loadUser() {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  validateRegister(user): boolean {\n    return !(user.name == undefined || user.email == undefined ||\n      user.username == undefined || user.email == undefined || user.password == undefined)\n  }\n\n  validateEmail(email){\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}